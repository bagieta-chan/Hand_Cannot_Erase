
Thesisv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009e50  08009e50  00019e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000094  08009fbc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08009fbc  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e0b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a9  00000000  00000000  00037ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aec7  00000000  00000000  0003dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0d0  00000000  00000000  00058bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3bc3  00000000  00000000  00075c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011984a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  0011989c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e38 	.word	0x08009e38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08009e38 	.word	0x08009e38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <accel_Init>:

static uint8_t acc_config = 0;
static uint8_t gyro_config = 0;

void accel_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af04      	add	r7, sp, #16
	uint8_t check, data;

	get_Dividers();
 8000f02:	f000 fa45 	bl	8001390 <get_Dividers>

	HAL_I2C_Mem_Read(&hi2c1, ACCEL_ADDRESS, SLAVE_REGISTER, 1, &check, 1, ACCEL_I2C_TIMEOUT);
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2275      	movs	r2, #117	; 0x75
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	481e      	ldr	r0, [pc, #120]	; (8000f94 <accel_Init+0x98>)
 8000f1a:	f003 f979 	bl	8004210 <HAL_I2C_Mem_Read>

	if(check == 0x68){
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b68      	cmp	r3, #104	; 0x68
 8000f22:	d133      	bne.n	8000f8c <accel_Init+0x90>

		data = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, ACCEL_ADDRESS, POWER_MANAGEMENT, 1, &data, 1, ACCEL_I2C_TIMEOUT);
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	226b      	movs	r2, #107	; 0x6b
 8000f38:	21d0      	movs	r1, #208	; 0xd0
 8000f3a:	4816      	ldr	r0, [pc, #88]	; (8000f94 <accel_Init+0x98>)
 8000f3c:	f003 f86e 	bl	800401c <HAL_I2C_Mem_Write>

		data = 0x07;
 8000f40:	2307      	movs	r3, #7
 8000f42:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, ACCEL_ADDRESS, SMPLRT_DIV_REGISTER, 1, &data, 1, ACCEL_I2C_TIMEOUT);
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	1dbb      	adds	r3, r7, #6
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	2219      	movs	r2, #25
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <accel_Init+0x98>)
 8000f58:	f003 f860 	bl	800401c <HAL_I2C_Mem_Write>


		HAL_I2C_Mem_Write(&hi2c1, ACCEL_ADDRESS, ACCEL_CONFIG_REG, 1, &acc_config, 1, ACCEL_I2C_TIMEOUT);
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <accel_Init+0x9c>)
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	221c      	movs	r2, #28
 8000f6c:	21d0      	movs	r1, #208	; 0xd0
 8000f6e:	4809      	ldr	r0, [pc, #36]	; (8000f94 <accel_Init+0x98>)
 8000f70:	f003 f854 	bl	800401c <HAL_I2C_Mem_Write>


		HAL_I2C_Mem_Write(&hi2c1, ACCEL_ADDRESS, GYRO_CONFIG_REG, 1, &gyro_config, 1, ACCEL_I2C_TIMEOUT);
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <accel_Init+0xa0>)
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	221b      	movs	r2, #27
 8000f84:	21d0      	movs	r1, #208	; 0xd0
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <accel_Init+0x98>)
 8000f88:	f003 f848 	bl	800401c <HAL_I2C_Mem_Write>
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000308 	.word	0x20000308
 8000f98:	20000100 	.word	0x20000100
 8000f9c:	20000101 	.word	0x20000101

08000fa0 <accel_ReadAccel>:

void accel_ReadAccel(Accel *device)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	HAL_I2C_Mem_Read(&hi2c1, ACCEL_ADDRESS, ACCEL_X_OUT, 1, data, 6, ACCEL_I2C_TIMEOUT/10);
 8000fa8:	230a      	movs	r3, #10
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2306      	movs	r3, #6
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	223b      	movs	r2, #59	; 0x3b
 8000fba:	21d0      	movs	r1, #208	; 0xd0
 8000fbc:	4827      	ldr	r0, [pc, #156]	; (800105c <accel_ReadAccel+0xbc>)
 8000fbe:	f003 f927 	bl	8004210 <HAL_I2C_Mem_Read>

	device->accel_X_OG = (data[0] << 8) | data[1];
 8000fc2:	7a3b      	ldrb	r3, [r7, #8]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7a7b      	ldrb	r3, [r7, #9]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	801a      	strh	r2, [r3, #0]
	device->accel_Y_OG = (data[2] << 8) | data[3];
 8000fd4:	7abb      	ldrb	r3, [r7, #10]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	805a      	strh	r2, [r3, #2]
	device->accel_Z_OG = (data[4] << 8) | data[5];
 8000fe6:	7b3b      	ldrb	r3, [r7, #12]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	809a      	strh	r2, [r3, #4]

	device->accel_X_proc = (float)device->accel_X_OG / acc_divider;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <accel_ReadAccel+0xc0>)
 8001008:	ed93 7a00 	vldr	s14, [r3]
 800100c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	edc3 7a03 	vstr	s15, [r3, #12]
	device->accel_Y_proc = (float)device->accel_Y_OG / acc_divider;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	885b      	ldrh	r3, [r3, #2]
 800101a:	b21b      	sxth	r3, r3
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <accel_ReadAccel+0xc0>)
 8001026:	ed93 7a00 	vldr	s14, [r3]
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	edc3 7a04 	vstr	s15, [r3, #16]
	device->accel_Z_proc = (float)device->accel_Z_OG / acc_divider;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	b21b      	sxth	r3, r3
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <accel_ReadAccel+0xc0>)
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000308 	.word	0x20000308
 8001060:	200000fc 	.word	0x200000fc

08001064 <accel_ReadGyro>:

void accel_ReadGyro(Accel *device)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	HAL_I2C_Mem_Read(&hi2c1, ACCEL_ADDRESS, GYRO_X_OUT, 1, data, 6, ACCEL_I2C_TIMEOUT/10);
 800106c:	230a      	movs	r3, #10
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2306      	movs	r3, #6
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	2243      	movs	r2, #67	; 0x43
 800107e:	21d0      	movs	r1, #208	; 0xd0
 8001080:	482d      	ldr	r0, [pc, #180]	; (8001138 <accel_ReadGyro+0xd4>)
 8001082:	f003 f8c5 	bl	8004210 <HAL_I2C_Mem_Read>

	device->gyro_X_OG = (data[0] << 8) | data[1];
 8001086:	7a3b      	ldrb	r3, [r7, #8]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7a7b      	ldrb	r3, [r7, #9]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	80da      	strh	r2, [r3, #6]
	device->gyro_Y_OG = (data[2] << 8) | data[3];
 8001098:	7abb      	ldrb	r3, [r7, #10]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	811a      	strh	r2, [r3, #8]
	device->gyro_Z_OG = (data[4] << 8) | data[5];
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	815a      	strh	r2, [r3, #10]

	device->gyro_X_held = (float)device->gyro_X_OG / gyro_divider + GYRO_X_CONSTANT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	88db      	ldrh	r3, [r3, #6]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <accel_ReadGyro+0xd8>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001140 <accel_ReadGyro+0xdc>
 80010d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	device->gyro_Y_held = (float)device->gyro_Y_OG / gyro_divider + GYRO_Y_CONSTANT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	891b      	ldrh	r3, [r3, #8]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <accel_ReadGyro+0xd8>)
 80010f2:	ed93 7a00 	vldr	s14, [r3]
 80010f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001144 <accel_ReadGyro+0xe0>
 80010fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	device->gyro_Z_held = (float)device->gyro_Z_OG / gyro_divider + GYRO_Z_CONSTANT;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	895b      	ldrh	r3, [r3, #10]
 800110c:	b21b      	sxth	r3, r3
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <accel_ReadGyro+0xd8>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001120:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001148 <accel_ReadGyro+0xe4>
 8001124:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000308 	.word	0x20000308
 800113c:	200000f8 	.word	0x200000f8
 8001140:	40a9999a 	.word	0x40a9999a
 8001144:	400ccccd 	.word	0x400ccccd
 8001148:	3f8ccccd 	.word	0x3f8ccccd
 800114c:	00000000 	.word	0x00000000

08001150 <accel_GetAngles>:

void accel_GetAngles(Accel *device)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	device->rollAngle =  atan(device->accel_Y_proc/sqrt(device->accel_X_proc*device->accel_X_proc+device->accel_Z_proc*device->accel_Z_proc))*180.0/PI;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_f2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	ed93 7a03 	vldr	s14, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 6a05 	vldr	s13, [r3, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	ee17 0a90 	vmov	r0, s15
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	ec43 2b10 	vmov	d0, r2, r3
 800119a:	f008 fd6e 	bl	8009c7a <sqrt>
 800119e:	ec53 2b10 	vmov	r2, r3, d0
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff fb51 	bl	800084c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	f008 fbb5 	bl	8009928 <atan>
 80011be:	ec51 0b10 	vmov	r0, r1, d0
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <accel_GetAngles+0x158>)
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	a332      	add	r3, pc, #200	; (adr r3, 80012a0 <accel_GetAngles+0x150>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fb37 	bl	800084c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fcb7 	bl	8000b58 <__aeabi_d2f>
 80011ea:	4602      	mov	r2, r0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
	device->pitchAngle = atan(-device->accel_X_proc/sqrt(device->accel_Y_proc*device->accel_Y_proc+device->accel_Z_proc*device->accel_Z_proc))*180.0/PI;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f6:	eef1 7a67 	vneg.f32	s15, s15
 80011fa:	ee17 3a90 	vmov	r3, s15
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9a2 	bl	8000548 <__aeabi_f2d>
 8001204:	4604      	mov	r4, r0
 8001206:	460d      	mov	r5, r1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	ed93 7a04 	vldr	s14, [r3, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	edd3 7a04 	vldr	s15, [r3, #16]
 8001214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	edd3 6a05 	vldr	s13, [r3, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a05 	vldr	s15, [r3, #20]
 8001224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	ec43 2b10 	vmov	d0, r2, r3
 800123c:	f008 fd1d 	bl	8009c7a <sqrt>
 8001240:	ec53 2b10 	vmov	r2, r3, d0
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff fb00 	bl	800084c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	ec43 2b17 	vmov	d7, r2, r3
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	f008 fb64 	bl	8009928 <atan>
 8001260:	ec51 0b10 	vmov	r0, r1, d0
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <accel_GetAngles+0x158>)
 800126a:	f7ff f9c5 	bl	80005f8 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	a30a      	add	r3, pc, #40	; (adr r3, 80012a0 <accel_GetAngles+0x150>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fae6 	bl	800084c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc66 	bl	8000b58 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	e0000000 	.word	0xe0000000
 80012a4:	400922d0 	.word	0x400922d0
 80012a8:	40668000 	.word	0x40668000

080012ac <accel_IntegrateGyro>:

void accel_IntegrateGyro(Accel* device, float elapsedFreq)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	ed87 0a00 	vstr	s0, [r7]
	device->gyro_X_proc += device->gyro_X_held / elapsedFreq;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80012be:	edd7 7a00 	vldr	s15, [r7]
 80012c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80012cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edc3 7a06 	vstr	s15, [r3, #24]
	device->gyro_Y_proc += device->gyro_Y_held / elapsedFreq;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80012dc:	edd7 7a00 	vldr	s15, [r7]
 80012e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a07 	vstr	s15, [r3, #28]
	device->gyro_Z_proc += device->gyro_Z_held / elapsedFreq;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80012fa:	edd7 7a00 	vldr	s15, [r7]
 80012fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a08 	vldr	s15, [r3, #32]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a08 	vstr	s15, [r3, #32]

	device->gyro_X_fproc = 100.0 * device->gyro_X_proc;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f916 	bl	8000548 <__aeabi_f2d>
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <accel_IntegrateGyro+0xe0>)
 8001322:	f7ff f969 	bl	80005f8 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc13 	bl	8000b58 <__aeabi_d2f>
 8001332:	4602      	mov	r2, r0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
	device->gyro_Y_fproc = 100.0 * device->gyro_Y_proc;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f903 	bl	8000548 <__aeabi_f2d>
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <accel_IntegrateGyro+0xe0>)
 8001348:	f7ff f956 	bl	80005f8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc00 	bl	8000b58 <__aeabi_d2f>
 8001358:	4602      	mov	r2, r0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
	device->gyro_Z_fproc = 100.0 * device->gyro_Z_proc;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8f0 	bl	8000548 <__aeabi_f2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <accel_IntegrateGyro+0xe0>)
 800136e:	f7ff f943 	bl	80005f8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fbed 	bl	8000b58 <__aeabi_d2f>
 800137e:	4602      	mov	r2, r0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40590000 	.word	0x40590000

08001390 <get_Dividers>:


void get_Dividers()
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
#elif defined(ACCEL_RANGE4G)
	acc_divider = ACCEL_RANGE4G;
	acc_config = 0b00001000;

#elif defined(ACCEL_RANGE8G)
	acc_divider = ACCEL_RANGE8G;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <get_Dividers+0x28>)
 8001396:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800139a:	601a      	str	r2, [r3, #0]
	acc_config = 0b00010000;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <get_Dividers+0x2c>)
 800139e:	2210      	movs	r2, #16
 80013a0:	701a      	strb	r2, [r3, #0]
	acc_config = 0b00011000;

#endif

#if defined(GYRO_RANGE250_DEG)
	gyro_divider = GYRO_RANGE250_DEG;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <get_Dividers+0x30>)
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <get_Dividers+0x34>)
 80013a6:	601a      	str	r2, [r3, #0]
	gyro_config = 0b00000000;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <get_Dividers+0x38>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
#elif defined(GYRO_RANGE2000_DEG)
	gyro_divider = GYRO_RANGE2000_DEG;
	gyro_config = 0b00011000;

#endif
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	200000fc 	.word	0x200000fc
 80013bc:	20000100 	.word	0x20000100
 80013c0:	200000f8 	.word	0x200000f8
 80013c4:	43030000 	.word	0x43030000
 80013c8:	20000101 	.word	0x20000101

080013cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <MX_ADC1_Init+0x108>)
 80013e0:	4a3d      	ldr	r2, [pc, #244]	; (80014d8 <MX_ADC1_Init+0x10c>)
 80013e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80013e4:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <MX_ADC1_Init+0x108>)
 80013e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <MX_ADC1_Init+0x108>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013f2:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <MX_ADC1_Init+0x108>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <MX_ADC1_Init+0x108>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013fe:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <MX_ADC1_Init+0x108>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MX_ADC1_Init+0x108>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <MX_ADC1_Init+0x108>)
 800140e:	4a33      	ldr	r2, [pc, #204]	; (80014dc <MX_ADC1_Init+0x110>)
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <MX_ADC1_Init+0x108>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_ADC1_Init+0x108>)
 800141a:	2205      	movs	r2, #5
 800141c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <MX_ADC1_Init+0x108>)
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_ADC1_Init+0x108>)
 8001428:	2201      	movs	r2, #1
 800142a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142c:	4829      	ldr	r0, [pc, #164]	; (80014d4 <MX_ADC1_Init+0x108>)
 800142e:	f001 f9d3 	bl	80027d8 <HAL_ADC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 fcce 	bl	8001dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800143c:	2300      	movs	r3, #0
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	4619      	mov	r1, r3
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <MX_ADC1_Init+0x108>)
 800144e:	f001 fb15 	bl	8002a7c <HAL_ADC_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001458:	f000 fcbe 	bl	8001dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800145c:	2301      	movs	r3, #1
 800145e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001460:	2302      	movs	r3, #2
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	; (80014d4 <MX_ADC1_Init+0x108>)
 800146a:	f001 fb07 	bl	8002a7c <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001474:	f000 fcb0 	bl	8001dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001478:	2308      	movs	r3, #8
 800147a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800147c:	2303      	movs	r3, #3
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_ADC1_Init+0x108>)
 8001486:	f001 faf9 	bl	8002a7c <HAL_ADC_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001490:	f000 fca2 	bl	8001dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001494:	2309      	movs	r3, #9
 8001496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149c:	463b      	mov	r3, r7
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_ADC1_Init+0x108>)
 80014a2:	f001 faeb 	bl	8002a7c <HAL_ADC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80014ac:	f000 fc94 	bl	8001dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014b0:	230a      	movs	r3, #10
 80014b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80014b4:	2305      	movs	r3, #5
 80014b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_ADC1_Init+0x108>)
 80014be:	f001 fadd 	bl	8002a7c <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80014c8:	f000 fc86 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000190 	.word	0x20000190
 80014d8:	40012000 	.word	0x40012000
 80014dc:	0f000001 	.word	0x0f000001

080014e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_ADC_MspInit+0x158>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	f040 8096 	bne.w	8001630 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	4b4c      	ldr	r3, [pc, #304]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6453      	str	r3, [r2, #68]	; 0x44
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	4b45      	ldr	r3, [pc, #276]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b42      	ldr	r3, [pc, #264]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a3d      	ldr	r2, [pc, #244]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a36      	ldr	r2, [pc, #216]	; (800163c <HAL_ADC_MspInit+0x15c>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_ADC_MspInit+0x15c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	482e      	ldr	r0, [pc, #184]	; (8001640 <HAL_ADC_MspInit+0x160>)
 8001588:	f002 fa66 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800158c:	2303      	movs	r3, #3
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4829      	ldr	r0, [pc, #164]	; (8001644 <HAL_ADC_MspInit+0x164>)
 80015a0:	f002 fa5a 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015a4:	2303      	movs	r3, #3
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a8:	2303      	movs	r3, #3
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <HAL_ADC_MspInit+0x168>)
 80015b8:	f002 fa4e 	bl	8003a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015be:	4a24      	ldr	r2, [pc, #144]	; (8001650 <HAL_ADC_MspInit+0x170>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_ADC_MspInit+0x16c>)
 80015fe:	2204      	movs	r2, #4
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_ADC_MspInit+0x16c>)
 8001604:	2203      	movs	r2, #3
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_ADC_MspInit+0x16c>)
 800160a:	2200      	movs	r2, #0
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_ADC_MspInit+0x16c>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <HAL_ADC_MspInit+0x16c>)
 8001616:	f001 fe0f 	bl	8003238 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_ADC_MspInit+0x144>
    {
      Error_Handler();
 8001620:	f000 fbda 	bl	8001dd8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_ADC_MspInit+0x16c>)
 8001628:	639a      	str	r2, [r3, #56]	; 0x38
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_ADC_MspInit+0x16c>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3730      	adds	r7, #48	; 0x30
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40012000 	.word	0x40012000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	200001d8 	.word	0x200001d8
 8001650:	40026410 	.word	0x40026410

08001654 <enable_BluetoothEditMode>:
static char baud_rate[] = "";

bool bt_editMode = false;

void enable_BluetoothEditMode(bool* check_status)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if(!*check_status)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00f      	beq.n	800168a <enable_BluetoothEditMode+0x36>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <enable_BluetoothEditMode+0x64>)
 8001672:	f002 fb75 	bl	8003d60 <HAL_GPIO_WritePin>
		HAL_Delay(TIME_OF_BREAK);
 8001676:	2032      	movs	r0, #50	; 0x32
 8001678:	f001 f88a 	bl	8002790 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <enable_BluetoothEditMode+0x68>)
 8001684:	f002 fb6c 	bl	8003d60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
	}

}
 8001688:	e011      	b.n	80016ae <enable_BluetoothEditMode+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <enable_BluetoothEditMode+0x64>)
 8001692:	f002 fb65 	bl	8003d60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169c:	4807      	ldr	r0, [pc, #28]	; (80016bc <enable_BluetoothEditMode+0x68>)
 800169e:	f002 fb5f 	bl	8003d60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <enable_BluetoothEditMode+0x68>)
 80016aa:	f002 fb59 	bl	8003d60 <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020000 	.word	0x40020000

080016c0 <check_bluetooth_Name>:
	}

}

void check_bluetooth_Name()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af02      	add	r7, sp, #8


	memset(bluetooth_TX_buffer,0, BUFF_LEN);
 80016c6:	2264      	movs	r2, #100	; 0x64
 80016c8:	2100      	movs	r1, #0
 80016ca:	4823      	ldr	r0, [pc, #140]	; (8001758 <check_bluetooth_Name+0x98>)
 80016cc:	f007 fc9e 	bl	800900c <memset>
	memset(result_command, 0, BUFF_LEN);
 80016d0:	2264      	movs	r2, #100	; 0x64
 80016d2:	2100      	movs	r1, #0
 80016d4:	4821      	ldr	r0, [pc, #132]	; (800175c <check_bluetooth_Name+0x9c>)
 80016d6:	f007 fc99 	bl	800900c <memset>

	sprintf(result_command, "%s+%s?%s", command_AT, command_name, command_end);
 80016da:	4b21      	ldr	r3, [pc, #132]	; (8001760 <check_bluetooth_Name+0xa0>)
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <check_bluetooth_Name+0xa4>)
 80016e0:	4a21      	ldr	r2, [pc, #132]	; (8001768 <check_bluetooth_Name+0xa8>)
 80016e2:	4922      	ldr	r1, [pc, #136]	; (800176c <check_bluetooth_Name+0xac>)
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <check_bluetooth_Name+0x9c>)
 80016e6:	f007 fc99 	bl	800901c <siprintf>
	sprintf(bluetooth_TX_buffer, "%s", result_command);
 80016ea:	4a1c      	ldr	r2, [pc, #112]	; (800175c <check_bluetooth_Name+0x9c>)
 80016ec:	4920      	ldr	r1, [pc, #128]	; (8001770 <check_bluetooth_Name+0xb0>)
 80016ee:	481a      	ldr	r0, [pc, #104]	; (8001758 <check_bluetooth_Name+0x98>)
 80016f0:	f007 fc94 	bl	800901c <siprintf>

	if(*bluetooth_TX_buffer != '\0')
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <check_bluetooth_Name+0x98>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d029      	beq.n	8001752 <check_bluetooth_Name+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fe:	b672      	cpsid	i
}
 8001700:	bf00      	nop
	{
		__disable_irq();
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)bluetooth_TX_buffer, BUFF_LEN);
 8001702:	2264      	movs	r2, #100	; 0x64
 8001704:	4914      	ldr	r1, [pc, #80]	; (8001758 <check_bluetooth_Name+0x98>)
 8001706:	481b      	ldr	r0, [pc, #108]	; (8001774 <check_bluetooth_Name+0xb4>)
 8001708:	f006 fab4 	bl	8007c74 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 800170c:	b662      	cpsie	i
}
 800170e:	bf00      	nop
		__enable_irq();
		while(!(USART2->SR & USART_SR_TC)){}
 8001710:	bf00      	nop
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <check_bluetooth_Name+0xb8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f9      	beq.n	8001712 <check_bluetooth_Name+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
 800171e:	b672      	cpsid	i
}
 8001720:	bf00      	nop
		__disable_irq();
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)bluetooth_TX_buffer, BUFF_LEN);
 8001722:	2264      	movs	r2, #100	; 0x64
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <check_bluetooth_Name+0x98>)
 8001726:	4815      	ldr	r0, [pc, #84]	; (800177c <check_bluetooth_Name+0xbc>)
 8001728:	f006 faa4 	bl	8007c74 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 800172c:	b662      	cpsie	i
}
 800172e:	bf00      	nop
		__enable_irq();
		while(!(USART1->SR & USART_SR_TC)){}
 8001730:	bf00      	nop
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <check_bluetooth_Name+0xc0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <check_bluetooth_Name+0x72>


		memset(bluetooth_TX_buffer,0, BUFF_LEN);
 800173e:	2264      	movs	r2, #100	; 0x64
 8001740:	2100      	movs	r1, #0
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <check_bluetooth_Name+0x98>)
 8001744:	f007 fc62 	bl	800900c <memset>


		HAL_UART_Receive_DMA(&huart1, (uint8_t *)bluetooth_RX1_buffer, BUFF_LEN);
 8001748:	2264      	movs	r2, #100	; 0x64
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <check_bluetooth_Name+0xc4>)
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <check_bluetooth_Name+0xb4>)
 800174e:	f006 fb0f 	bl	8007d70 <HAL_UART_Receive_DMA>


	}

}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000029c 	.word	0x2000029c
 800175c:	20000238 	.word	0x20000238
 8001760:	20000000 	.word	0x20000000
 8001764:	2000001c 	.word	0x2000001c
 8001768:	20000004 	.word	0x20000004
 800176c:	08009e5c 	.word	0x08009e5c
 8001770:	08009e58 	.word	0x08009e58
 8001774:	2000058c 	.word	0x2000058c
 8001778:	40004400 	.word	0x40004400
 800177c:	200005d0 	.word	0x200005d0
 8001780:	40011000 	.word	0x40011000
 8001784:	20000104 	.word	0x20000104

08001788 <set_bluetooth_Name>:

	}
}

void set_bluetooth_Name()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af02      	add	r7, sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 800178e:	b672      	cpsid	i
}
 8001790:	bf00      	nop

	__disable_irq();
	memset(bluetooth_TX_buffer,0, BUFF_LEN);
 8001792:	2264      	movs	r2, #100	; 0x64
 8001794:	2100      	movs	r1, #0
 8001796:	484b      	ldr	r0, [pc, #300]	; (80018c4 <set_bluetooth_Name+0x13c>)
 8001798:	f007 fc38 	bl	800900c <memset>
	memset(result_command, 0, BUFF_LEN);
 800179c:	2264      	movs	r2, #100	; 0x64
 800179e:	2100      	movs	r1, #0
 80017a0:	4849      	ldr	r0, [pc, #292]	; (80018c8 <set_bluetooth_Name+0x140>)
 80017a2:	f007 fc33 	bl	800900c <memset>

	sprintf(result_command, "%s+%s=%s%s", command_AT, command_name, command_module_name, command_end);
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <set_bluetooth_Name+0x144>)
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <set_bluetooth_Name+0x148>)
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <set_bluetooth_Name+0x14c>)
 80017b0:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <set_bluetooth_Name+0x150>)
 80017b2:	494a      	ldr	r1, [pc, #296]	; (80018dc <set_bluetooth_Name+0x154>)
 80017b4:	4844      	ldr	r0, [pc, #272]	; (80018c8 <set_bluetooth_Name+0x140>)
 80017b6:	f007 fc31 	bl	800901c <siprintf>
	sprintf(bluetooth_TX_buffer, "%s", result_command);
 80017ba:	4a43      	ldr	r2, [pc, #268]	; (80018c8 <set_bluetooth_Name+0x140>)
 80017bc:	4948      	ldr	r1, [pc, #288]	; (80018e0 <set_bluetooth_Name+0x158>)
 80017be:	4841      	ldr	r0, [pc, #260]	; (80018c4 <set_bluetooth_Name+0x13c>)
 80017c0:	f007 fc2c 	bl	800901c <siprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80017c4:	b662      	cpsie	i
}
 80017c6:	bf00      	nop
	__enable_irq();


	if(*bluetooth_TX_buffer != '\0')
 80017c8:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <set_bluetooth_Name+0x13c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d073      	beq.n	80018ba <set_bluetooth_Name+0x132>
	{

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)bluetooth_TX_buffer, BUFF_LEN);
 80017d2:	2264      	movs	r2, #100	; 0x64
 80017d4:	493b      	ldr	r1, [pc, #236]	; (80018c4 <set_bluetooth_Name+0x13c>)
 80017d6:	4843      	ldr	r0, [pc, #268]	; (80018e4 <set_bluetooth_Name+0x15c>)
 80017d8:	f006 fa4c 	bl	8007c74 <HAL_UART_Transmit_DMA>

		while(!(USART2->SR & USART_SR_TC)){}
 80017dc:	bf00      	nop
 80017de:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <set_bluetooth_Name+0x160>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f9      	beq.n	80017de <set_bluetooth_Name+0x56>

		USART2->SR &=~ USART_SR_TC;
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <set_bluetooth_Name+0x160>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a3e      	ldr	r2, [pc, #248]	; (80018e8 <set_bluetooth_Name+0x160>)
 80017f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017f4:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)bluetooth_TX_buffer, BUFF_LEN);
 80017f6:	2264      	movs	r2, #100	; 0x64
 80017f8:	4932      	ldr	r1, [pc, #200]	; (80018c4 <set_bluetooth_Name+0x13c>)
 80017fa:	483c      	ldr	r0, [pc, #240]	; (80018ec <set_bluetooth_Name+0x164>)
 80017fc:	f006 fa3a 	bl	8007c74 <HAL_UART_Transmit_DMA>

		while(!(USART1->SR & USART_SR_TC)){}
 8001800:	bf00      	nop
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <set_bluetooth_Name+0x168>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f9      	beq.n	8001802 <set_bluetooth_Name+0x7a>

		USART2->SR &=~ USART_SR_TC;
 800180e:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <set_bluetooth_Name+0x160>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a35      	ldr	r2, [pc, #212]	; (80018e8 <set_bluetooth_Name+0x160>)
 8001814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001818:	6013      	str	r3, [r2, #0]


		memset(bluetooth_RX1_buffer,0, BUFF_LEN);
 800181a:	2264      	movs	r2, #100	; 0x64
 800181c:	2100      	movs	r1, #0
 800181e:	4835      	ldr	r0, [pc, #212]	; (80018f4 <set_bluetooth_Name+0x16c>)
 8001820:	f007 fbf4 	bl	800900c <memset>

		char confirm = "OK\r\n";
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <set_bluetooth_Name+0x170>)
 8001826:	71fb      	strb	r3, [r7, #7]
		char* tmp = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop

		while(1)
		{
			__disable_irq();
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)bluetooth_RX1_buffer, BUFF_LEN);
 8001830:	2264      	movs	r2, #100	; 0x64
 8001832:	4930      	ldr	r1, [pc, #192]	; (80018f4 <set_bluetooth_Name+0x16c>)
 8001834:	482b      	ldr	r0, [pc, #172]	; (80018e4 <set_bluetooth_Name+0x15c>)
 8001836:	f006 fa9b 	bl	8007d70 <HAL_UART_Receive_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 800183a:	b662      	cpsie	i
}
 800183c:	bf00      	nop
			__enable_irq();

			tmp = (char*)bluetooth_RX1_buffer;
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <set_bluetooth_Name+0x16c>)
 8001840:	60fb      	str	r3, [r7, #12]

			for(int i = 0; i< BUFF_LEN; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	e00d      	b.n	8001864 <set_bluetooth_Name+0xdc>
			{
				if(*(tmp + i) != 0)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <set_bluetooth_Name+0xd6>
				{
					tmp = tmp + i;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
					break;
 800185c:	e005      	b.n	800186a <set_bluetooth_Name+0xe2>
			for(int i = 0; i< BUFF_LEN; i++)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3301      	adds	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b63      	cmp	r3, #99	; 0x63
 8001868:	ddee      	ble.n	8001848 <set_bluetooth_Name+0xc0>
				}
			}


			if(strstr(tmp, confirm) != NULL)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4619      	mov	r1, r3
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f007 fbf4 	bl	800905c <strstr>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <set_bluetooth_Name+0x10a>
			{
				memset(bluetooth_RX1_buffer,0, BUFF_LEN);
 800187a:	2264      	movs	r2, #100	; 0x64
 800187c:	2100      	movs	r1, #0
 800187e:	481d      	ldr	r0, [pc, #116]	; (80018f4 <set_bluetooth_Name+0x16c>)
 8001880:	f007 fbc4 	bl	800900c <memset>
				break;
 8001884:	bf00      	nop
				memset(bluetooth_RX1_buffer,0, BUFF_LEN);
				HAL_Delay(1000);
			}
		}

		memset(bluetooth_TX_buffer,0, BUFF_LEN);
 8001886:	2264      	movs	r2, #100	; 0x64
 8001888:	2100      	movs	r1, #0
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <set_bluetooth_Name+0x13c>)
 800188c:	f007 fbbe 	bl	800900c <memset>

	}


}
 8001890:	e013      	b.n	80018ba <set_bluetooth_Name+0x132>
				HAL_UART_Transmit_DMA(&huart1, (uint8_t *)bluetooth_TX_buffer, BUFF_LEN);
 8001892:	2264      	movs	r2, #100	; 0x64
 8001894:	490b      	ldr	r1, [pc, #44]	; (80018c4 <set_bluetooth_Name+0x13c>)
 8001896:	4813      	ldr	r0, [pc, #76]	; (80018e4 <set_bluetooth_Name+0x15c>)
 8001898:	f006 f9ec 	bl	8007c74 <HAL_UART_Transmit_DMA>
				HAL_UART_Transmit_DMA(&huart2, (uint8_t *)bluetooth_TX_buffer, BUFF_LEN);
 800189c:	2264      	movs	r2, #100	; 0x64
 800189e:	4909      	ldr	r1, [pc, #36]	; (80018c4 <set_bluetooth_Name+0x13c>)
 80018a0:	4812      	ldr	r0, [pc, #72]	; (80018ec <set_bluetooth_Name+0x164>)
 80018a2:	f006 f9e7 	bl	8007c74 <HAL_UART_Transmit_DMA>
				memset(bluetooth_RX1_buffer,0, BUFF_LEN);
 80018a6:	2264      	movs	r2, #100	; 0x64
 80018a8:	2100      	movs	r1, #0
 80018aa:	4812      	ldr	r0, [pc, #72]	; (80018f4 <set_bluetooth_Name+0x16c>)
 80018ac:	f007 fbae 	bl	800900c <memset>
				HAL_Delay(1000);
 80018b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b4:	f000 ff6c 	bl	8002790 <HAL_Delay>
			__disable_irq();
 80018b8:	e7b8      	b.n	800182c <set_bluetooth_Name+0xa4>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000029c 	.word	0x2000029c
 80018c8:	20000238 	.word	0x20000238
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	2000001c 	.word	0x2000001c
 80018d8:	20000004 	.word	0x20000004
 80018dc:	08009e68 	.word	0x08009e68
 80018e0:	08009e58 	.word	0x08009e58
 80018e4:	2000058c 	.word	0x2000058c
 80018e8:	40004400 	.word	0x40004400
 80018ec:	200005d0 	.word	0x200005d0
 80018f0:	40011000 	.word	0x40011000
 80018f4:	20000104 	.word	0x20000104
 80018f8:	08009e74 	.word	0x08009e74

080018fc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_CRC_Init+0x20>)
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <MX_CRC_Init+0x24>)
 8001904:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_CRC_Init+0x20>)
 8001908:	f001 fc79 	bl	80031fe <HAL_CRC_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001912:	f000 fa61 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000300 	.word	0x20000300
 8001920:	40023000 	.word	0x40023000

08001924 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_CRC_MspInit+0x3c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10d      	bne.n	8001952 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_CRC_MspInit+0x40>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_CRC_MspInit+0x40>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_CRC_MspInit+0x40>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023000 	.word	0x40023000
 8001964:	40023800 	.word	0x40023800

08001968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <MX_DMA_Init+0x98>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <MX_DMA_Init+0x98>)
 8001978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <MX_DMA_Init+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_DMA_Init+0x98>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <MX_DMA_Init+0x98>)
 8001994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_DMA_Init+0x98>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2102      	movs	r1, #2
 80019aa:	200b      	movs	r0, #11
 80019ac:	f001 fbf1 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019b0:	200b      	movs	r0, #11
 80019b2:	f001 fc0a 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2011      	movs	r0, #17
 80019bc:	f001 fbe9 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019c0:	2011      	movs	r0, #17
 80019c2:	f001 fc02 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2102      	movs	r1, #2
 80019ca:	2038      	movs	r0, #56	; 0x38
 80019cc:	f001 fbe1 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019d0:	2038      	movs	r0, #56	; 0x38
 80019d2:	f001 fbfa 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	203a      	movs	r0, #58	; 0x3a
 80019dc:	f001 fbd9 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019e0:	203a      	movs	r0, #58	; 0x3a
 80019e2:	f001 fbf2 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	2046      	movs	r0, #70	; 0x46
 80019ec:	f001 fbd1 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80019f0:	2046      	movs	r0, #70	; 0x46
 80019f2:	f001 fbea 	bl	80031ca <HAL_NVIC_EnableIRQ>

}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_GPIO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a90:	4816      	ldr	r0, [pc, #88]	; (8001aec <MX_GPIO_Init+0xe8>)
 8001a92:	f002 f965 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9c:	4814      	ldr	r0, [pc, #80]	; (8001af0 <MX_GPIO_Init+0xec>)
 8001a9e:	f002 f95f 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_GPIO_Init+0xe8>)
 8001abc:	f001 ffcc 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_GPIO_Init+0xec>)
 8001ada:	f001 ffbd 	bl	8003a58 <HAL_GPIO_Init>

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020400 	.word	0x40020400
 8001af0:	40020000 	.word	0x40020000

08001af4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_I2C1_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_I2C1_Init+0x58>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b32:	f002 f92f 	bl	8003d94 <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 f94c 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000308 	.word	0x20000308
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	000186a0 	.word	0x000186a0

08001b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <HAL_I2C_MspInit+0x100>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d16a      	bne.n	8001c48 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a36      	ldr	r2, [pc, #216]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b92:	2312      	movs	r3, #18
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	482b      	ldr	r0, [pc, #172]	; (8001c58 <HAL_I2C_MspInit+0x108>)
 8001baa:	f001 ff55 	bl	8003a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0x104>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <HAL_I2C_MspInit+0x110>)
 8001bce:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c0c:	4813      	ldr	r0, [pc, #76]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001c0e:	f001 fb13 	bl	8003238 <HAL_DMA_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001c18:	f000 f8de 	bl	8001dd8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <HAL_I2C_MspInit+0x10c>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	201f      	movs	r0, #31
 8001c2e:	f001 fab0 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c32:	201f      	movs	r0, #31
 8001c34:	f001 fac9 	bl	80031ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2020      	movs	r0, #32
 8001c3e:	f001 faa8 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c42:	2020      	movs	r0, #32
 8001c44:	f001 fac1 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	2000035c 	.word	0x2000035c
 8001c60:	40026010 	.word	0x40026010

08001c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c68:	f000 fd20 	bl	80026ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 f848 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c70:	f7ff fec8 	bl	8001a04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c74:	f7ff fe78 	bl	8001968 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c78:	f7ff fba8 	bl	80013cc <MX_ADC1_Init>
  MX_RTC_Init();
 8001c7c:	f000 f8b2 	bl	8001de4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001c80:	f000 fba2 	bl	80023c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c84:	f7ff ff36 	bl	8001af4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001c88:	f000 fa06 	bl	8002098 <MX_TIM2_Init>
  MX_CRC_Init();
 8001c8c:	f7ff fe36 	bl	80018fc <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001c90:	f000 fb70 	bl	8002374 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001c94:	f000 fa4c 	bl	8002130 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001c98:	f000 f892 	bl	8001dc0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
   enable_BluetoothEditMode(&bt_editMode);
 8001c9c:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <main+0x80>)
 8001c9e:	f7ff fcd9 	bl	8001654 <enable_BluetoothEditMode>
   calculate_Tim2Period();
 8001ca2:	f000 fb4b 	bl	800233c <calculate_Tim2Period>
   accel_Init();
 8001ca6:	f7ff f929 	bl	8000efc <accel_Init>
   HAL_TIM_Base_Start_IT(&htim2);
 8001caa:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <main+0x84>)
 8001cac:	f005 fb9e 	bl	80073ec <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim3);
 8001cb0:	480e      	ldr	r0, [pc, #56]	; (8001cec <main+0x88>)
 8001cb2:	f005 fb9b 	bl	80073ec <HAL_TIM_Base_Start_IT>
   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)pot_variables, FINGERS_AMOUNT);
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	490d      	ldr	r1, [pc, #52]	; (8001cf0 <main+0x8c>)
 8001cba:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <main+0x90>)
 8001cbc:	f000 fdd0 	bl	8002860 <HAL_ADC_Start_DMA>
   HAL_UART_Receive_DMA(&huart1, bluetooth_RX1_buffer, BUFF_LEN);
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <main+0x94>)
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <main+0x98>)
 8001cc6:	f006 f853 	bl	8007d70 <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	    check_bluetooth_Name();
 8001cca:	f7ff fcf9 	bl	80016c0 <check_bluetooth_Name>
	    HAL_Delay(1000);
 8001cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd2:	f000 fd5d 	bl	8002790 <HAL_Delay>
	    set_bluetooth_Name();
 8001cd6:	f7ff fd57 	bl	8001788 <set_bluetooth_Name>
	    HAL_Delay(1000);
 8001cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cde:	f000 fd57 	bl	8002790 <HAL_Delay>
	    check_bluetooth_Name();
 8001ce2:	e7f2      	b.n	8001cca <main+0x66>
 8001ce4:	20000168 	.word	0x20000168
 8001ce8:	20000424 	.word	0x20000424
 8001cec:	200003dc 	.word	0x200003dc
 8001cf0:	2000016c 	.word	0x2000016c
 8001cf4:	20000190 	.word	0x20000190
 8001cf8:	20000104 	.word	0x20000104
 8001cfc:	2000058c 	.word	0x2000058c

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b094      	sub	sp, #80	; 0x50
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2230      	movs	r2, #48	; 0x30
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f007 f97c 	bl	800900c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <SystemClock_Config+0xb8>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <SystemClock_Config+0xb8>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <SystemClock_Config+0xb8>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <SystemClock_Config+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <SystemClock_Config+0xbc>)
 8001d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <SystemClock_Config+0xbc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d5c:	230a      	movs	r3, #10
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d64:	2310      	movs	r3, #16
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fca7 	bl	80066c8 <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001d80:	f000 f82a 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d84:	230f      	movs	r3, #15
 8001d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 ff0a 	bl	8006bb8 <HAL_RCC_ClockConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001daa:	f000 f815 	bl	8001dd8 <Error_Handler>
  }
}
 8001dae:	bf00      	nop
 8001db0:	3750      	adds	r7, #80	; 0x50
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	2026      	movs	r0, #38	; 0x26
 8001dca:	f001 f9e2 	bl	8003192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dce:	2026      	movs	r0, #38	; 0x26
 8001dd0:	f001 f9fb 	bl	80031ca <HAL_NVIC_EnableIRQ>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <Error_Handler+0x8>
	...

08001de4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <MX_RTC_Init+0x44>)
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <MX_RTC_Init+0x48>)
 8001dec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_RTC_Init+0x44>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_RTC_Init+0x44>)
 8001df6:	227f      	movs	r2, #127	; 0x7f
 8001df8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_RTC_Init+0x44>)
 8001dfc:	22ff      	movs	r2, #255	; 0xff
 8001dfe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_RTC_Init+0x44>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_RTC_Init+0x44>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_RTC_Init+0x44>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_RTC_Init+0x44>)
 8001e14:	f005 f9a0 	bl	8007158 <HAL_RTC_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e1e:	f7ff ffdb 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200003bc 	.word	0x200003bc
 8001e2c:	40002800 	.word	0x40002800

08001e30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_RTC_MspInit+0x50>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d111      	bne.n	8001e78 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e54:	2302      	movs	r3, #2
 8001e56:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	4618      	mov	r0, r3
 8001e64:	f005 f888 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e6e:	f7ff ffb3 	bl	8001dd8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_RTC_MspInit+0x54>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40002800 	.word	0x40002800
 8001e84:	42470e3c 	.word	0x42470e3c

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <NMI_Handler+0x4>

08001ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f24:	f000 fc14 	bl	8002750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <DMA1_Stream0_IRQHandler+0x10>)
 8001f32:	f001 fb19 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000035c 	.word	0x2000035c

08001f40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <DMA1_Stream6_IRQHandler+0x10>)
 8001f46:	f001 fb0f 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000052c 	.word	0x2000052c

08001f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM2_IRQHandler+0x10>)
 8001f5a:	f005 faa9 	bl	80074b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000424 	.word	0x20000424

08001f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM3_IRQHandler+0x10>)
 8001f6e:	f005 fa9f 	bl	80074b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200003dc 	.word	0x200003dc

08001f7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <I2C1_EV_IRQHandler+0x10>)
 8001f82:	f002 fb6b 	bl	800465c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000308 	.word	0x20000308

08001f90 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <I2C1_ER_IRQHandler+0x10>)
 8001f96:	f002 fcd2 	bl	800493e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000308 	.word	0x20000308

08001fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <USART1_IRQHandler+0x10>)
 8001faa:	f005 ff11 	bl	8007dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000058c 	.word	0x2000058c

08001fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <USART2_IRQHandler+0x10>)
 8001fbe:	f005 ff07 	bl	8007dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200005d0 	.word	0x200005d0

08001fcc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <DMA2_Stream0_IRQHandler+0x10>)
 8001fd2:	f001 fac9 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200001d8 	.word	0x200001d8

08001fe0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <DMA2_Stream2_IRQHandler+0x10>)
 8001fe6:	f001 fabf 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200004cc 	.word	0x200004cc

08001ff4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <DMA2_Stream7_IRQHandler+0x10>)
 8001ffa:	f001 fab5 	bl	8003568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000046c 	.word	0x2000046c

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f006 ffbe 	bl	8008fb8 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20020000 	.word	0x20020000
 8002068:	00000400 	.word	0x00000400
 800206c:	20000178 	.word	0x20000178
 8002070:	20000618 	.word	0x20000618

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MX_TIM2_Init+0x94>)
 80020b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <MX_TIM2_Init+0x94>)
 80020be:	2227      	movs	r2, #39	; 0x27
 80020c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_TIM2_Init+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM2_Init+0x94>)
 80020ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80020ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d0:	4b16      	ldr	r3, [pc, #88]	; (800212c <MX_TIM2_Init+0x94>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_TIM2_Init+0x94>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020dc:	4813      	ldr	r0, [pc, #76]	; (800212c <MX_TIM2_Init+0x94>)
 80020de:	f005 f935 	bl	800734c <HAL_TIM_Base_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020e8:	f7ff fe76 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	4619      	mov	r1, r3
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <MX_TIM2_Init+0x94>)
 80020fa:	f005 fae1 	bl	80076c0 <HAL_TIM_ConfigClockSource>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002104:	f7ff fe68 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_TIM2_Init+0x94>)
 8002116:	f005 fcdd 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002120:	f7ff fe5a 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000424 	.word	0x20000424

08002130 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <MX_TIM3_Init+0x94>)
 800214e:	4a1e      	ldr	r2, [pc, #120]	; (80021c8 <MX_TIM3_Init+0x98>)
 8002150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM3_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002162:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002166:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_TIM3_Init+0x94>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002174:	4813      	ldr	r0, [pc, #76]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002176:	f005 f8e9 	bl	800734c <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002180:	f7ff fe2a 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4619      	mov	r1, r3
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_TIM3_Init+0x94>)
 8002192:	f005 fa95 	bl	80076c0 <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800219c:	f7ff fe1c 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_TIM3_Init+0x94>)
 80021ae:	f005 fc91 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80021b8:	f7ff fe0e 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200003dc 	.word	0x200003dc
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021dc:	d116      	bne.n	800220c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_TIM_Base_MspInit+0x80>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_TIM_Base_MspInit+0x80>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_TIM_Base_MspInit+0x80>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	201c      	movs	r0, #28
 8002200:	f000 ffc7 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002204:	201c      	movs	r0, #28
 8002206:	f000 ffe0 	bl	80031ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800220a:	e01a      	b.n	8002242 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_TIM_Base_MspInit+0x84>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d115      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_TIM_Base_MspInit+0x80>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_TIM_Base_MspInit+0x80>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <HAL_TIM_Base_MspInit+0x80>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	201d      	movs	r0, #29
 8002238:	f000 ffab 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800223c:	201d      	movs	r0, #29
 800223e:	f000 ffc4 	bl	80031ca <HAL_NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40000400 	.word	0x40000400

08002254 <HAL_TIM_PeriodElapsedCallback>:

static volatile float tim3_freq = 0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d111      	bne.n	800228a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		  accel_ReadAccel(&acc_device);
 8002266:	482e      	ldr	r0, [pc, #184]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002268:	f7fe fe9a 	bl	8000fa0 <accel_ReadAccel>
		  accel_ReadGyro(&acc_device);
 800226c:	482c      	ldr	r0, [pc, #176]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800226e:	f7fe fef9 	bl	8001064 <accel_ReadGyro>
     	  accel_IntegrateGyro(&acc_device, tim3_freq);
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	4828      	ldr	r0, [pc, #160]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800227e:	f7ff f815 	bl	80012ac <accel_IntegrateGyro>
		  accel_GetAngles(&acc_device);
 8002282:	4827      	ldr	r0, [pc, #156]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002284:	f7fe ff64 	bl	8001150 <accel_GetAngles>
 8002288:	e046      	b.n	8002318 <HAL_TIM_PeriodElapsedCallback+0xc4>

	}

	else if(htim->Instance == TIM3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a26      	ldr	r2, [pc, #152]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d141      	bne.n	8002318 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{

		char* temp = NULL;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
		int i =0;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]

		for(i; i<BUFF_LEN; i++)
 800229c:	e018      	b.n	80022d0 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			if(bluetooth_RX1_buffer[i] != 0)
 800229e:	4a23      	ldr	r2, [pc, #140]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x62>
			{
				temp = &bluetooth_RX1_buffer[i];
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
				break;
 80022b4:	e00f      	b.n	80022d6 <HAL_TIM_PeriodElapsedCallback+0x82>
			}
			else if(i == BUFF_LEN - 1 && bluetooth_RX1_buffer[i] == 0)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b63      	cmp	r3, #99	; 0x63
 80022ba:	d106      	bne.n	80022ca <HAL_TIM_PeriodElapsedCallback+0x76>
 80022bc:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d025      	beq.n	8002316 <HAL_TIM_PeriodElapsedCallback+0xc2>
		for(i; i<BUFF_LEN; i++)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b63      	cmp	r3, #99	; 0x63
 80022d4:	dde3      	ble.n	800229e <HAL_TIM_PeriodElapsedCallback+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 80022d6:	b672      	cpsid	i
}
 80022d8:	bf00      	nop
				return;
		}

			__disable_irq();
			HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp, BUFF_LEN - i);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	4811      	ldr	r0, [pc, #68]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80022ea:	f005 fcc3 	bl	8007c74 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 80022ee:	b662      	cpsie	i
}
 80022f0:	bf00      	nop
			__enable_irq();

			while(!(USART2->SR & USART_SR_TC)){
 80022f2:	bf00      	nop
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f9      	beq.n	80022f4 <HAL_TIM_PeriodElapsedCallback+0xa0>

					}

			memset(bluetooth_RX1_buffer,0, BUFF_LEN);
 8002300:	2264      	movs	r2, #100	; 0x64
 8002302:	2100      	movs	r1, #0
 8002304:	4809      	ldr	r0, [pc, #36]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002306:	f006 fe81 	bl	800900c <memset>
			HAL_UART_Receive_DMA(&huart1, bluetooth_RX1_buffer, BUFF_LEN);
 800230a:	2264      	movs	r2, #100	; 0x64
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800230e:	480a      	ldr	r0, [pc, #40]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002310:	f005 fd2e 	bl	8007d70 <HAL_UART_Receive_DMA>
 8002314:	e000      	b.n	8002318 <HAL_TIM_PeriodElapsedCallback+0xc4>
				return;
 8002316:	bf00      	nop

		}



}
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200000b0 	.word	0x200000b0
 8002324:	2000017c 	.word	0x2000017c
 8002328:	40000400 	.word	0x40000400
 800232c:	20000104 	.word	0x20000104
 8002330:	200005d0 	.word	0x200005d0
 8002334:	40004400 	.word	0x40004400
 8002338:	2000058c 	.word	0x2000058c

0800233c <calculate_Tim2Period>:

void calculate_Tim2Period()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	tim3_freq = (float)(HAL_RCC_GetPCLK1Freq()/((htim2.Init.Prescaler + 1) * (htim2.Init.Period + 1)));
 8002340:	f004 fdf2 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 8002344:	4601      	mov	r1, r0
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <calculate_Tim2Period+0x30>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <calculate_Tim2Period+0x30>)
 800234e:	68d2      	ldr	r2, [r2, #12]
 8002350:	3201      	adds	r2, #1
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	fbb1 f3f3 	udiv	r3, r1, r3
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002362:	4b03      	ldr	r3, [pc, #12]	; (8002370 <calculate_Tim2Period+0x34>)
 8002364:	edc3 7a00 	vstr	s15, [r3]
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000424 	.word	0x20000424
 8002370:	2000017c 	.word	0x2000017c

08002374 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <MX_USART1_UART_Init+0x50>)
 800237c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 8002380:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_USART1_UART_Init+0x4c>)
 80023ac:	f005 fc14 	bl	8007bd8 <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023b6:	f7ff fd0f 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000058c 	.word	0x2000058c
 80023c4:	40011000 	.word	0x40011000

080023c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <MX_USART2_UART_Init+0x50>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80023d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023ee:	2208      	movs	r2, #8
 80023f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_USART2_UART_Init+0x4c>)
 8002400:	f005 fbea 	bl	8007bd8 <HAL_UART_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800240a:	f7ff fce5 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200005d0 	.word	0x200005d0
 8002418:	40004400 	.word	0x40004400

0800241c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7d      	ldr	r2, [pc, #500]	; (8002630 <HAL_UART_MspInit+0x214>)
 800243a:	4293      	cmp	r3, r2
 800243c:	f040 8094 	bne.w	8002568 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	4b7b      	ldr	r3, [pc, #492]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	4a7a      	ldr	r2, [pc, #488]	; (8002634 <HAL_UART_MspInit+0x218>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	6453      	str	r3, [r2, #68]	; 0x44
 8002450:	4b78      	ldr	r3, [pc, #480]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	4b74      	ldr	r3, [pc, #464]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a73      	ldr	r2, [pc, #460]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b71      	ldr	r3, [pc, #452]	; (8002634 <HAL_UART_MspInit+0x218>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002478:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800248a:	2307      	movs	r3, #7
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4868      	ldr	r0, [pc, #416]	; (8002638 <HAL_UART_MspInit+0x21c>)
 8002496:	f001 fadf 	bl	8003a58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800249a:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_UART_MspInit+0x220>)
 800249c:	4a68      	ldr	r2, [pc, #416]	; (8002640 <HAL_UART_MspInit+0x224>)
 800249e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_UART_MspInit+0x220>)
 80024a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a8:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_UART_MspInit+0x220>)
 80024aa:	2240      	movs	r2, #64	; 0x40
 80024ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_UART_MspInit+0x220>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_UART_MspInit+0x220>)
 80024b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024bc:	4b5f      	ldr	r3, [pc, #380]	; (800263c <HAL_UART_MspInit+0x220>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c2:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_UART_MspInit+0x220>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024c8:	4b5c      	ldr	r3, [pc, #368]	; (800263c <HAL_UART_MspInit+0x220>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_UART_MspInit+0x220>)
 80024d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024d4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d6:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_UART_MspInit+0x220>)
 80024d8:	2200      	movs	r2, #0
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024dc:	4857      	ldr	r0, [pc, #348]	; (800263c <HAL_UART_MspInit+0x220>)
 80024de:	f000 feab 	bl	8003238 <HAL_DMA_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80024e8:	f7ff fc76 	bl	8001dd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_UART_MspInit+0x220>)
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
 80024f2:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_UART_MspInit+0x220>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024f8:	4b52      	ldr	r3, [pc, #328]	; (8002644 <HAL_UART_MspInit+0x228>)
 80024fa:	4a53      	ldr	r2, [pc, #332]	; (8002648 <HAL_UART_MspInit+0x22c>)
 80024fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002500:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002504:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250c:	4b4d      	ldr	r3, [pc, #308]	; (8002644 <HAL_UART_MspInit+0x228>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002512:	4b4c      	ldr	r3, [pc, #304]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002518:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_UART_MspInit+0x228>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002520:	4b48      	ldr	r3, [pc, #288]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002528:	2200      	movs	r2, #0
 800252a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800252c:	4b45      	ldr	r3, [pc, #276]	; (8002644 <HAL_UART_MspInit+0x228>)
 800252e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002532:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002534:	4b43      	ldr	r3, [pc, #268]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800253a:	4842      	ldr	r0, [pc, #264]	; (8002644 <HAL_UART_MspInit+0x228>)
 800253c:	f000 fe7c 	bl	8003238 <HAL_DMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002546:	f7ff fc47 	bl	8001dd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <HAL_UART_MspInit+0x228>)
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
 8002550:	4a3c      	ldr	r2, [pc, #240]	; (8002644 <HAL_UART_MspInit+0x228>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2102      	movs	r1, #2
 800255a:	2025      	movs	r0, #37	; 0x25
 800255c:	f000 fe19 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002560:	2025      	movs	r0, #37	; 0x25
 8002562:	f000 fe32 	bl	80031ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002566:	e05f      	b.n	8002628 <HAL_UART_MspInit+0x20c>
  else if(uartHandle->Instance==USART2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a37      	ldr	r2, [pc, #220]	; (800264c <HAL_UART_MspInit+0x230>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d15a      	bne.n	8002628 <HAL_UART_MspInit+0x20c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a2e      	ldr	r2, [pc, #184]	; (8002634 <HAL_UART_MspInit+0x218>)
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a27      	ldr	r2, [pc, #156]	; (8002634 <HAL_UART_MspInit+0x218>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <HAL_UART_MspInit+0x218>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MONIT_TX_Pin|MONIT_RX_Pin;
 80025aa:	230c      	movs	r3, #12
 80025ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ba:	2307      	movs	r3, #7
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	481c      	ldr	r0, [pc, #112]	; (8002638 <HAL_UART_MspInit+0x21c>)
 80025c6:	f001 fa47 	bl	8003a58 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_UART_MspInit+0x238>)
 80025ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025f8:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_UART_MspInit+0x234>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_UART_MspInit+0x234>)
 8002600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002604:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_UART_MspInit+0x234>)
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800260c:	4810      	ldr	r0, [pc, #64]	; (8002650 <HAL_UART_MspInit+0x234>)
 800260e:	f000 fe13 	bl	8003238 <HAL_DMA_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002618:	f7ff fbde 	bl	8001dd8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_UART_MspInit+0x234>)
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <HAL_UART_MspInit+0x234>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002628:	bf00      	nop
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40011000 	.word	0x40011000
 8002634:	40023800 	.word	0x40023800
 8002638:	40020000 	.word	0x40020000
 800263c:	2000046c 	.word	0x2000046c
 8002640:	400264b8 	.word	0x400264b8
 8002644:	200004cc 	.word	0x200004cc
 8002648:	40026440 	.word	0x40026440
 800264c:	40004400 	.word	0x40004400
 8002650:	2000052c 	.word	0x2000052c
 8002654:	400260a0 	.word	0x400260a0

08002658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800265e:	490e      	ldr	r1, [pc, #56]	; (8002698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002660:	4a0e      	ldr	r2, [pc, #56]	; (800269c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002674:	4c0b      	ldr	r4, [pc, #44]	; (80026a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002682:	f7ff fcf7 	bl	8002074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002686:	f006 fc9d 	bl	8008fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800268a:	f7ff faeb 	bl	8001c64 <main>
  bx  lr    
 800268e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002698:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800269c:	08009f28 	.word	0x08009f28
  ldr r2, =_sbss
 80026a0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80026a4:	20000618 	.word	0x20000618

080026a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a8:	e7fe      	b.n	80026a8 <ADC_IRQHandler>
	...

080026ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <HAL_Init+0x40>)
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_Init+0x40>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_Init+0x40>)
 80026c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_Init+0x40>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_Init+0x40>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d4:	2003      	movs	r0, #3
 80026d6:	f000 fd51 	bl	800317c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026da:	2000      	movs	r0, #0
 80026dc:	f000 f808 	bl	80026f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e0:	f7ff fbd2 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00

080026f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x54>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_InitTick+0x58>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	fbb3 f3f1 	udiv	r3, r3, r1
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fd69 	bl	80031e6 <HAL_SYSTICK_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00e      	b.n	800273c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d80a      	bhi.n	800273a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f000 fd31 	bl	8003192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002730:	4a06      	ldr	r2, [pc, #24]	; (800274c <HAL_InitTick+0x5c>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000024 	.word	0x20000024
 8002748:	2000002c 	.word	0x2000002c
 800274c:	20000028 	.word	0x20000028

08002750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_IncTick+0x20>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_IncTick+0x24>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4413      	add	r3, r2
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_IncTick+0x24>)
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	2000002c 	.word	0x2000002c
 8002774:	20000614 	.word	0x20000614

08002778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return uwTick;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_GetTick+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000614 	.word	0x20000614

08002790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff ffee 	bl	8002778 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d005      	beq.n	80027b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_Delay+0x44>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027b6:	bf00      	nop
 80027b8:	f7ff ffde 	bl	8002778 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d8f7      	bhi.n	80027b8 <HAL_Delay+0x28>
  {
  }
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000002c 	.word	0x2000002c

080027d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e033      	b.n	8002856 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fe72 	bl	80014e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800281e:	f023 0302 	bic.w	r3, r3, #2
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa58 	bl	8002ce0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f023 0303 	bic.w	r3, r3, #3
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
 8002846:	e001      	b.n	800284c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_Start_DMA+0x1e>
 800287a:	2302      	movs	r3, #2
 800287c:	e0ce      	b.n	8002a1c <HAL_ADC_Start_DMA+0x1bc>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d018      	beq.n	80028c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_ADC_Start_DMA+0x1c4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5f      	ldr	r2, [pc, #380]	; (8002a28 <HAL_ADC_Start_DMA+0x1c8>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	3b01      	subs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d4:	d107      	bne.n	80028e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 8086 	bne.w	8002a02 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002920:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002934:	d106      	bne.n	8002944 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f023 0206 	bic.w	r2, r3, #6
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
 8002942:	e002      	b.n	800294a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002952:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_ADC_Start_DMA+0x1cc>)
 8002954:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	4a35      	ldr	r2, [pc, #212]	; (8002a30 <HAL_ADC_Start_DMA+0x1d0>)
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_ADC_Start_DMA+0x1d4>)
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4a33      	ldr	r2, [pc, #204]	; (8002a38 <HAL_ADC_Start_DMA+0x1d8>)
 800296c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002976:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002986:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002996:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	334c      	adds	r3, #76	; 0x4c
 80029a2:	4619      	mov	r1, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f000 fcf4 	bl	8003394 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d129      	bne.n	8002a1a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	e020      	b.n	8002a1a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_ADC_Start_DMA+0x1dc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d11b      	bne.n	8002a1a <HAL_ADC_Start_DMA+0x1ba>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d114      	bne.n	8002a1a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e00b      	b.n	8002a1a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000024 	.word	0x20000024
 8002a28:	431bde83 	.word	0x431bde83
 8002a2c:	40012300 	.word	0x40012300
 8002a30:	08002ed9 	.word	0x08002ed9
 8002a34:	08002f93 	.word	0x08002f93
 8002a38:	08002faf 	.word	0x08002faf
 8002a3c:	40012000 	.word	0x40012000

08002a40 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x1c>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e113      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x244>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b09      	cmp	r3, #9
 8002aa6:	d925      	bls.n	8002af4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68d9      	ldr	r1, [r3, #12]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b1e      	subs	r3, #30
 8002abe:	2207      	movs	r2, #7
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	400a      	ands	r2, r1
 8002acc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68d9      	ldr	r1, [r3, #12]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4403      	add	r3, r0
 8002ae6:	3b1e      	subs	r3, #30
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	e022      	b.n	8002b3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6919      	ldr	r1, [r3, #16]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	2207      	movs	r2, #7
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4403      	add	r3, r0
 8002b30:	409a      	lsls	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d824      	bhi.n	8002b8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3b05      	subs	r3, #5
 8002b54:	221f      	movs	r2, #31
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	400a      	ands	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b05      	subs	r3, #5
 8002b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8a:	e04c      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d824      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b23      	subs	r3, #35	; 0x23
 8002ba6:	221f      	movs	r2, #31
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43da      	mvns	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b23      	subs	r3, #35	; 0x23
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
 8002bdc:	e023      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3b41      	subs	r3, #65	; 0x41
 8002bf0:	221f      	movs	r2, #31
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3b41      	subs	r3, #65	; 0x41
 8002c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_ADC_ConfigChannel+0x250>)
 8002c28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <HAL_ADC_ConfigChannel+0x254>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10f      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d8>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b12      	cmp	r3, #18
 8002c3a:	d10b      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_ADC_ConfigChannel+0x254>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x23a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_ADC_ConfigChannel+0x258>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x1f4>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b11      	cmp	r3, #17
 8002c6e:	d122      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_ADC_ConfigChannel+0x258>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d111      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_ADC_ConfigChannel+0x25c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_ADC_ConfigChannel+0x260>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9a      	lsrs	r2, r3, #18
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ca8:	e002      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f9      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40012300 	.word	0x40012300
 8002cd0:	40012000 	.word	0x40012000
 8002cd4:	10000012 	.word	0x10000012
 8002cd8:	20000024 	.word	0x20000024
 8002cdc:	431bde83 	.word	0x431bde83

08002ce0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce8:	4b79      	ldr	r3, [pc, #484]	; (8002ed0 <ADC_Init+0x1f0>)
 8002cea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <ADC_Init+0x1f4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e00f      	b.n	8002dde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ddc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0202 	bic.w	r2, r2, #2
 8002dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7e1b      	ldrb	r3, [r3, #24]
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	3b01      	subs	r3, #1
 8002e38:	035a      	lsls	r2, r3, #13
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e007      	b.n	8002e54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	051a      	lsls	r2, r3, #20
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e96:	025a      	lsls	r2, r3, #9
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	029a      	lsls	r2, r3, #10
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012300 	.word	0x40012300
 8002ed4:	0f000001 	.word	0x0f000001

08002ed8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13c      	bne.n	8002f6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d12b      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d127      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d119      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0220 	bic.w	r2, r2, #32
 8002f3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fd6b 	bl	8002a40 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f6a:	e00e      	b.n	8002f8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7ff fd75 	bl	8002a68 <HAL_ADC_ErrorCallback>
}
 8002f7e:	e004      	b.n	8002f8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fd57 	bl	8002a54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2240      	movs	r2, #64	; 0x40
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff fd4a 	bl	8002a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	; (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0b      	blt.n	800306a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4907      	ldr	r1, [pc, #28]	; (8003078 <__NVIC_EnableIRQ+0x38>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2001      	movs	r0, #1
 8003062:	fa00 f202 	lsl.w	r2, r0, r2
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100

0800307c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db0a      	blt.n	80030a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	490c      	ldr	r1, [pc, #48]	; (80030c8 <__NVIC_SetPriority+0x4c>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	440b      	add	r3, r1
 80030a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a4:	e00a      	b.n	80030bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4908      	ldr	r1, [pc, #32]	; (80030cc <__NVIC_SetPriority+0x50>)
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	3b04      	subs	r3, #4
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	440b      	add	r3, r1
 80030ba:	761a      	strb	r2, [r3, #24]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	bf28      	it	cs
 80030ee:	2304      	movcs	r3, #4
 80030f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d902      	bls.n	8003100 <NVIC_EncodePriority+0x30>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b03      	subs	r3, #3
 80030fe:	e000      	b.n	8003102 <NVIC_EncodePriority+0x32>
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43d9      	mvns	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	4313      	orrs	r3, r2
         );
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	; 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003148:	d301      	bcc.n	800314e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314a:	2301      	movs	r3, #1
 800314c:	e00f      	b.n	800316e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314e:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <SysTick_Config+0x40>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003156:	210f      	movs	r1, #15
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	f7ff ff8e 	bl	800307c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <SysTick_Config+0x40>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <SysTick_Config+0x40>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000e010 	.word	0xe000e010

0800317c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff29 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff3e 	bl	8003024 <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ff8e 	bl	80030d0 <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff5d 	bl	800307c <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff31 	bl	8003040 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ffa2 	bl	8003138 <SysTick_Config>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e00e      	b.n	800322e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	795b      	ldrb	r3, [r3, #5]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fe fb7f 	bl	8001924 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff fa98 	bl	8002778 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e099      	b.n	8003388 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003274:	e00f      	b.n	8003296 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003276:	f7ff fa7f 	bl	8002778 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b05      	cmp	r3, #5
 8003282:	d908      	bls.n	8003296 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2203      	movs	r2, #3
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e078      	b.n	8003388 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e8      	bne.n	8003276 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_DMA_Init+0x158>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d107      	bne.n	8003300 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	4313      	orrs	r3, r2
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b04      	cmp	r3, #4
 8003328:	d117      	bne.n	800335a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fb0f 	bl	8003960 <DMA_CheckFifoParam>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2240      	movs	r2, #64	; 0x40
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003356:	2301      	movs	r3, #1
 8003358:	e016      	b.n	8003388 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fac6 	bl	80038f4 <DMA_CalcBaseAndBitshift>
 8003368:	4603      	mov	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	223f      	movs	r2, #63	; 0x3f
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	f010803f 	.word	0xf010803f

08003394 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_DMA_Start_IT+0x26>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e040      	b.n	800343c <HAL_DMA_Start_IT+0xa8>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d12f      	bne.n	800342e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 fa58 	bl	8003898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	223f      	movs	r2, #63	; 0x3f
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0216 	orr.w	r2, r2, #22
 8003402:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0208 	orr.w	r2, r2, #8
 800341a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e005      	b.n	800343a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003436:	2302      	movs	r3, #2
 8003438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003452:	f7ff f991 	bl	8002778 <HAL_GetTick>
 8003456:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d008      	beq.n	8003476 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e052      	b.n	800351c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0216 	bic.w	r2, r2, #22
 8003484:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_DMA_Abort+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0208 	bic.w	r2, r2, #8
 80034b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c6:	e013      	b.n	80034f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c8:	f7ff f956 	bl	8002778 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d90c      	bls.n	80034f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e015      	b.n	800351c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e4      	bne.n	80034c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e00c      	b.n	800355c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2205      	movs	r2, #5
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003574:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <HAL_DMA_IRQHandler+0x248>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a8e      	ldr	r2, [pc, #568]	; (80037b4 <HAL_DMA_IRQHandler+0x24c>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0a9b      	lsrs	r3, r3, #10
 8003580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2208      	movs	r2, #8
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01a      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	2208      	movs	r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	2201      	movs	r2, #1
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360e:	2204      	movs	r2, #4
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2204      	movs	r2, #4
 800362e:	409a      	lsls	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0204 	orr.w	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	2210      	movs	r2, #16
 8003646:	409a      	lsls	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d043      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03c      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	2210      	movs	r2, #16
 8003664:	409a      	lsls	r2, r3
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d018      	beq.n	80036aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d024      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e01f      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e016      	b.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0208 	bic.w	r2, r2, #8
 80036c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2220      	movs	r2, #32
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 808f 	beq.w	8003808 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8087 	beq.w	8003808 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2220      	movs	r2, #32
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d136      	bne.n	8003780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0216 	bic.w	r2, r2, #22
 8003720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_DMA_IRQHandler+0x1da>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0208 	bic.w	r2, r2, #8
 8003750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	223f      	movs	r2, #63	; 0x3f
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d07e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
        }
        return;
 800377e:	e079      	b.n	8003874 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01d      	beq.n	80037ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10d      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d031      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e02c      	b.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
 80037ae:	bf00      	nop
 80037b0:	20000024 	.word	0x20000024
 80037b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
 80037c8:	e01e      	b.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10f      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0210 	bic.w	r2, r2, #16
 80037e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	2b00      	cmp	r3, #0
 800380e:	d032      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d022      	beq.n	8003862 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2205      	movs	r2, #5
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3301      	adds	r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d307      	bcc.n	8003850 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f2      	bne.n	8003834 <HAL_DMA_IRQHandler+0x2cc>
 800384e:	e000      	b.n	8003852 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003850:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e000      	b.n	8003876 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003874:	bf00      	nop
    }
  }
}
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388a:	b2db      	uxtb	r3, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	d108      	bne.n	80038d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038d6:	e007      	b.n	80038e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	3b10      	subs	r3, #16
 8003904:	4a14      	ldr	r2, [pc, #80]	; (8003958 <DMA_CalcBaseAndBitshift+0x64>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <DMA_CalcBaseAndBitshift+0x68>)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b03      	cmp	r3, #3
 8003920:	d909      	bls.n	8003936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	659a      	str	r2, [r3, #88]	; 0x58
 8003934:	e007      	b.n	8003946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	aaaaaaab 	.word	0xaaaaaaab
 800395c:	08009e9c 	.word	0x08009e9c

08003960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11f      	bne.n	80039ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d856      	bhi.n	8003a2e <DMA_CheckFifoParam+0xce>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <DMA_CheckFifoParam+0x28>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	08003999 	.word	0x08003999
 800398c:	080039ab 	.word	0x080039ab
 8003990:	08003999 	.word	0x08003999
 8003994:	08003a2f 	.word	0x08003a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d046      	beq.n	8003a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a8:	e043      	b.n	8003a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b2:	d140      	bne.n	8003a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b8:	e03d      	b.n	8003a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d121      	bne.n	8003a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d837      	bhi.n	8003a3a <DMA_CheckFifoParam+0xda>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <DMA_CheckFifoParam+0x70>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039e1 	.word	0x080039e1
 80039d4:	080039e7 	.word	0x080039e7
 80039d8:	080039e1 	.word	0x080039e1
 80039dc:	080039f9 	.word	0x080039f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e030      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d025      	beq.n	8003a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f6:	e022      	b.n	8003a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a00:	d11f      	bne.n	8003a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a06:	e01c      	b.n	8003a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d903      	bls.n	8003a16 <DMA_CheckFifoParam+0xb6>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d003      	beq.n	8003a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a14:	e018      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1a:	e015      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a2c:	e00b      	b.n	8003a46 <DMA_CheckFifoParam+0xe6>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e00a      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
 8003a34:	e008      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e006      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <DMA_CheckFifoParam+0xe8>
      break;
 8003a46:	bf00      	nop
    }
  } 
  
  return status; 
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e159      	b.n	8003d28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	f040 8148 	bne.w	8003d22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d005      	beq.n	8003aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d130      	bne.n	8003b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0201 	and.w	r2, r3, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d017      	beq.n	8003b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	2203      	movs	r2, #3
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d123      	bne.n	8003b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	08da      	lsrs	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3208      	adds	r2, #8
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a2 	beq.w	8003d22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	4b57      	ldr	r3, [pc, #348]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bec:	6453      	str	r3, [r2, #68]	; 0x44
 8003bee:	4b54      	ldr	r3, [pc, #336]	; (8003d40 <HAL_GPIO_Init+0x2e8>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfa:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_GPIO_Init+0x2f0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d019      	beq.n	8003c5a <HAL_GPIO_Init+0x202>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_GPIO_Init+0x2f4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_GPIO_Init+0x1fe>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <HAL_GPIO_Init+0x2f8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00d      	beq.n	8003c52 <HAL_GPIO_Init+0x1fa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a46      	ldr	r2, [pc, #280]	; (8003d54 <HAL_GPIO_Init+0x2fc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <HAL_GPIO_Init+0x1f6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <HAL_GPIO_Init+0x300>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <HAL_GPIO_Init+0x1f2>
 8003c46:	2304      	movs	r3, #4
 8003c48:	e008      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e006      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e004      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e002      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_GPIO_Init+0x204>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f002 0203 	and.w	r2, r2, #3
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4093      	lsls	r3, r2
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6c:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HAL_GPIO_Init+0x2ec>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	3302      	adds	r3, #2
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c7a:	4b38      	ldr	r3, [pc, #224]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c9e:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cce:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1c:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <HAL_GPIO_Init+0x304>)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3301      	adds	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b0f      	cmp	r3, #15
 8003d2c:	f67f aea2 	bls.w	8003a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40013800 	.word	0x40013800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	40020800 	.word	0x40020800
 8003d54:	40020c00 	.word	0x40020c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d7c:	e003      	b.n	8003d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	041a      	lsls	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e12b      	b.n	8003ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fd fec8 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2224      	movs	r2, #36	; 0x24
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003df8:	f003 f896 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4a81      	ldr	r2, [pc, #516]	; (8004008 <HAL_I2C_Init+0x274>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d807      	bhi.n	8003e18 <HAL_I2C_Init+0x84>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a80      	ldr	r2, [pc, #512]	; (800400c <HAL_I2C_Init+0x278>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	bf94      	ite	ls
 8003e10:	2301      	movls	r3, #1
 8003e12:	2300      	movhi	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e006      	b.n	8003e26 <HAL_I2C_Init+0x92>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a7d      	ldr	r2, [pc, #500]	; (8004010 <HAL_I2C_Init+0x27c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bf94      	ite	ls
 8003e20:	2301      	movls	r3, #1
 8003e22:	2300      	movhi	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0e7      	b.n	8003ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a78      	ldr	r2, [pc, #480]	; (8004014 <HAL_I2C_Init+0x280>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4a6a      	ldr	r2, [pc, #424]	; (8004008 <HAL_I2C_Init+0x274>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d802      	bhi.n	8003e68 <HAL_I2C_Init+0xd4>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3301      	adds	r3, #1
 8003e66:	e009      	b.n	8003e7c <HAL_I2C_Init+0xe8>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	4a69      	ldr	r2, [pc, #420]	; (8004018 <HAL_I2C_Init+0x284>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	495c      	ldr	r1, [pc, #368]	; (8004008 <HAL_I2C_Init+0x274>)
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d819      	bhi.n	8003ed0 <HAL_I2C_Init+0x13c>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e59      	subs	r1, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003eb0:	400b      	ands	r3, r1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_I2C_Init+0x138>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1e59      	subs	r1, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	e051      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	e04f      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d111      	bne.n	8003efc <HAL_I2C_Init+0x168>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1e58      	subs	r0, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	440b      	add	r3, r1
 8003ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e012      	b.n	8003f22 <HAL_I2C_Init+0x18e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Init+0x196>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e022      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <HAL_I2C_Init+0x1bc>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1e58      	subs	r0, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	440b      	add	r3, r1
 8003f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4e:	e00f      	b.n	8003f70 <HAL_I2C_Init+0x1dc>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1e58      	subs	r0, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	0099      	lsls	r1, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f66:	3301      	adds	r3, #1
 8003f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	6809      	ldr	r1, [r1, #0]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6911      	ldr	r1, [r2, #16]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	4311      	orrs	r1, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	000186a0 	.word	0x000186a0
 800400c:	001e847f 	.word	0x001e847f
 8004010:	003d08ff 	.word	0x003d08ff
 8004014:	431bde83 	.word	0x431bde83
 8004018:	10624dd3 	.word	0x10624dd3

0800401c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	460b      	mov	r3, r1
 8004030:	813b      	strh	r3, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004036:	f7fe fb9f 	bl	8002778 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b20      	cmp	r3, #32
 8004046:	f040 80d9 	bne.w	80041fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2319      	movs	r3, #25
 8004050:	2201      	movs	r2, #1
 8004052:	496d      	ldr	r1, [pc, #436]	; (8004208 <HAL_I2C_Mem_Write+0x1ec>)
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f002 f90d 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
 8004062:	e0cc      	b.n	80041fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Mem_Write+0x56>
 800406e:	2302      	movs	r3, #2
 8004070:	e0c5      	b.n	80041fe <HAL_I2C_Mem_Write+0x1e2>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d007      	beq.n	8004098 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2221      	movs	r2, #33	; 0x21
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2240      	movs	r2, #64	; 0x40
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a4d      	ldr	r2, [pc, #308]	; (800420c <HAL_I2C_Mem_Write+0x1f0>)
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040da:	88f8      	ldrh	r0, [r7, #6]
 80040dc:	893a      	ldrh	r2, [r7, #8]
 80040de:	8979      	ldrh	r1, [r7, #10]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9301      	str	r3, [sp, #4]
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4603      	mov	r3, r0
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f001 fe9c 	bl	8005e28 <I2C_RequestMemoryWrite>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d052      	beq.n	800419c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e081      	b.n	80041fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f002 f98e 	bl	8006420 <I2C_WaitOnTXEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b04      	cmp	r3, #4
 8004110:	d107      	bne.n	8004122 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e06b      	b.n	80041fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d11b      	bne.n	800419c <HAL_I2C_Mem_Write+0x180>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d017      	beq.n	800419c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1aa      	bne.n	80040fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f002 f97a 	bl	80064a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d107      	bne.n	80041cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e016      	b.n	80041fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	00100002 	.word	0x00100002
 800420c:	ffff0000 	.word	0xffff0000

08004210 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08c      	sub	sp, #48	; 0x30
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4603      	mov	r3, r0
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	460b      	mov	r3, r1
 8004224:	813b      	strh	r3, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800422a:	f7fe faa5 	bl	8002778 <HAL_GetTick>
 800422e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b20      	cmp	r3, #32
 800423a:	f040 8208 	bne.w	800464e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2319      	movs	r3, #25
 8004244:	2201      	movs	r2, #1
 8004246:	497b      	ldr	r1, [pc, #492]	; (8004434 <HAL_I2C_Mem_Read+0x224>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f002 f813 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	e1fb      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_I2C_Mem_Read+0x56>
 8004262:	2302      	movs	r3, #2
 8004264:	e1f4      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d007      	beq.n	800428c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2222      	movs	r2, #34	; 0x22
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2240      	movs	r2, #64	; 0x40
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4a5b      	ldr	r2, [pc, #364]	; (8004438 <HAL_I2C_Mem_Read+0x228>)
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ce:	88f8      	ldrh	r0, [r7, #6]
 80042d0:	893a      	ldrh	r2, [r7, #8]
 80042d2:	8979      	ldrh	r1, [r7, #10]
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4603      	mov	r3, r0
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f001 fe38 	bl	8005f54 <I2C_RequestMemoryRead>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1b0      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d113      	bne.n	800431e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e184      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	2b01      	cmp	r3, #1
 8004324:	d11b      	bne.n	800435e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e164      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	2b02      	cmp	r3, #2
 8004364:	d11b      	bne.n	800439e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004374:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	e144      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043b4:	e138      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	f200 80f1 	bhi.w	80045a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d123      	bne.n	8004410 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f002 f8db 	bl	8006588 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e139      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440e:	e10b      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	2b02      	cmp	r3, #2
 8004416:	d14e      	bne.n	80044b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	2200      	movs	r2, #0
 8004420:	4906      	ldr	r1, [pc, #24]	; (800443c <HAL_I2C_Mem_Read+0x22c>)
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f001 ff26 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e10e      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
 8004432:	bf00      	nop
 8004434:	00100002 	.word	0x00100002
 8004438:	ffff0000 	.word	0xffff0000
 800443c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044b4:	e0b8      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2200      	movs	r2, #0
 80044be:	4966      	ldr	r1, [pc, #408]	; (8004658 <HAL_I2C_Mem_Read+0x448>)
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f001 fed7 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0bf      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2200      	movs	r2, #0
 800451a:	494f      	ldr	r1, [pc, #316]	; (8004658 <HAL_I2C_Mem_Read+0x448>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f001 fea9 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e091      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045a0:	e042      	b.n	8004628 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f001 ffee 	bl	8006588 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e04c      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d118      	bne.n	8004628 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	f47f aec2 	bne.w	80043b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	00010004 	.word	0x00010004

0800465c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800467c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b10      	cmp	r3, #16
 800468a:	d003      	beq.n	8004694 <HAL_I2C_EV_IRQHandler+0x38>
 800468c:	7bfb      	ldrb	r3, [r7, #15]
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	f040 80c1 	bne.w	8004816 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_I2C_EV_IRQHandler+0x6e>
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046b4:	d003      	beq.n	80046be <HAL_I2C_EV_IRQHandler+0x62>
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046bc:	d101      	bne.n	80046c2 <HAL_I2C_EV_IRQHandler+0x66>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_I2C_EV_IRQHandler+0x68>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f000 8132 	beq.w	800492e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00c      	beq.n	80046ee <HAL_I2C_EV_IRQHandler+0x92>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	0a5b      	lsrs	r3, r3, #9
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 ffd6 	bl	8006692 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fd83 	bl	80051f2 <I2C_Master_SB>
 80046ec:	e092      	b.n	8004814 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0xb2>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	0a5b      	lsrs	r3, r3, #9
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fdf9 	bl	80052fe <I2C_Master_ADD10>
 800470c:	e082      	b.n	8004814 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_I2C_EV_IRQHandler+0xd2>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0a5b      	lsrs	r3, r3, #9
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fe13 	bl	8005352 <I2C_Master_ADDR>
 800472c:	e072      	b.n	8004814 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03b      	beq.n	80047b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004748:	f000 80f3 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	09db      	lsrs	r3, r3, #7
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00f      	beq.n	8004778 <HAL_I2C_EV_IRQHandler+0x11c>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	0a9b      	lsrs	r3, r3, #10
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <HAL_I2C_EV_IRQHandler+0x11c>
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d103      	bne.n	8004778 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f9f3 	bl	8004b5c <I2C_MasterTransmit_TXE>
 8004776:	e04d      	b.n	8004814 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	089b      	lsrs	r3, r3, #2
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80d6 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	0a5b      	lsrs	r3, r3, #9
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80cf 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004794:	7bbb      	ldrb	r3, [r7, #14]
 8004796:	2b21      	cmp	r3, #33	; 0x21
 8004798:	d103      	bne.n	80047a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa7a 	bl	8004c94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a0:	e0c7      	b.n	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	f040 80c4 	bne.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fae8 	bl	8004d80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b0:	e0bf      	b.n	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c0:	f000 80b7 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00f      	beq.n	80047f0 <HAL_I2C_EV_IRQHandler+0x194>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <HAL_I2C_EV_IRQHandler+0x194>
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fb5d 	bl	8004ea8 <I2C_MasterReceive_RXNE>
 80047ee:	e011      	b.n	8004814 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 809a 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	0a5b      	lsrs	r3, r3, #9
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8093 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fc06 	bl	800501e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004812:	e08e      	b.n	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004814:	e08d      	b.n	8004932 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e007      	b.n	8004838 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d012      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x20e>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	0a5b      	lsrs	r3, r3, #9
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 ffc4 	bl	80057f0 <I2C_Slave_ADDR>
 8004868:	e066      	b.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_I2C_EV_IRQHandler+0x22e>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fffe 	bl	8005884 <I2C_Slave_STOPF>
 8004888:	e056      	b.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800488a:	7bbb      	ldrb	r3, [r7, #14]
 800488c:	2b21      	cmp	r3, #33	; 0x21
 800488e:	d002      	beq.n	8004896 <HAL_I2C_EV_IRQHandler+0x23a>
 8004890:	7bbb      	ldrb	r3, [r7, #14]
 8004892:	2b29      	cmp	r3, #41	; 0x29
 8004894:	d125      	bne.n	80048e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	09db      	lsrs	r3, r3, #7
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00f      	beq.n	80048c2 <HAL_I2C_EV_IRQHandler+0x266>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	0a9b      	lsrs	r3, r3, #10
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_I2C_EV_IRQHandler+0x266>
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 feda 	bl	8005674 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048c0:	e039      	b.n	8004936 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d033      	beq.n	8004936 <HAL_I2C_EV_IRQHandler+0x2da>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	0a5b      	lsrs	r3, r3, #9
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02d      	beq.n	8004936 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 ff07 	bl	80056ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e0:	e029      	b.n	8004936 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x2b2>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	0a9b      	lsrs	r3, r3, #10
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_I2C_EV_IRQHandler+0x2b2>
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 ff12 	bl	8005730 <I2C_SlaveReceive_RXNE>
 800490c:	e014      	b.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00e      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	0a5b      	lsrs	r3, r3, #9
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 ff40 	bl	80057ac <I2C_SlaveReceive_BTF>
 800492c:	e004      	b.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800492e:	bf00      	nop
 8004930:	e002      	b.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004936:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08a      	sub	sp, #40	; 0x28
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004960:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <HAL_I2C_ER_IRQHandler+0x4e>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d008      	beq.n	800498c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800498a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	0a5b      	lsrs	r3, r3, #9
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <HAL_I2C_ER_IRQHandler+0x78>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80049b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	0a9b      	lsrs	r3, r3, #10
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03f      	beq.n	8004a42 <HAL_I2C_ER_IRQHandler+0x104>
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d039      	beq.n	8004a42 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80049ce:	7efb      	ldrb	r3, [r7, #27]
 80049d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049e8:	7ebb      	ldrb	r3, [r7, #26]
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d112      	bne.n	8004a14 <HAL_I2C_ER_IRQHandler+0xd6>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10f      	bne.n	8004a14 <HAL_I2C_ER_IRQHandler+0xd6>
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b21      	cmp	r3, #33	; 0x21
 80049f8:	d008      	beq.n	8004a0c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049fa:	7cfb      	ldrb	r3, [r7, #19]
 80049fc:	2b29      	cmp	r3, #41	; 0x29
 80049fe:	d005      	beq.n	8004a0c <HAL_I2C_ER_IRQHandler+0xce>
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b28      	cmp	r3, #40	; 0x28
 8004a04:	d106      	bne.n	8004a14 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b21      	cmp	r3, #33	; 0x21
 8004a0a:	d103      	bne.n	8004a14 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f001 f869 	bl	8005ae4 <I2C_Slave_AF>
 8004a12:	e016      	b.n	8004a42 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a1c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	f043 0304 	orr.w	r3, r3, #4
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a26:	7efb      	ldrb	r3, [r7, #27]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d002      	beq.n	8004a32 <HAL_I2C_ER_IRQHandler+0xf4>
 8004a2c:	7efb      	ldrb	r3, [r7, #27]
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d107      	bne.n	8004a42 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a40:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	0adb      	lsrs	r3, r3, #11
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0x12e>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f043 0308 	orr.w	r3, r3, #8
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004a6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f001 f8a0 	bl	8005bc4 <I2C_ITError>
  }
}
 8004a84:	bf00      	nop
 8004a86:	3728      	adds	r7, #40	; 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d150      	bne.n	8004c24 <I2C_MasterTransmit_TXE+0xc8>
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b21      	cmp	r3, #33	; 0x21
 8004b86:	d14d      	bne.n	8004c24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d01d      	beq.n	8004bca <I2C_MasterTransmit_TXE+0x6e>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d01a      	beq.n	8004bca <I2C_MasterTransmit_TXE+0x6e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b9a:	d016      	beq.n	8004bca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004baa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2211      	movs	r2, #17
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ff62 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bc8:	e060      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d107      	bne.n	8004c14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff7d 	bl	8004b0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c12:	e03b      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff35 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c22:	e033      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b21      	cmp	r3, #33	; 0x21
 8004c28:	d005      	beq.n	8004c36 <I2C_MasterTransmit_TXE+0xda>
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d12d      	bne.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b22      	cmp	r3, #34	; 0x22
 8004c34:	d12a      	bne.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c50:	e01c      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d103      	bne.n	8004c66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f88e 	bl	8004d80 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c64:	e012      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c8a:	e7ff      	b.n	8004c8c <I2C_MasterTransmit_TXE+0x130>
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b21      	cmp	r3, #33	; 0x21
 8004cac:	d164      	bne.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d012      	beq.n	8004cde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004cdc:	e04c      	b.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d01d      	beq.n	8004d20 <I2C_MasterTransmit_BTF+0x8c>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d01a      	beq.n	8004d20 <I2C_MasterTransmit_BTF+0x8c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cf0:	d016      	beq.n	8004d20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2211      	movs	r2, #17
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff feb7 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
}
 8004d1e:	e02b      	b.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d107      	bne.n	8004d6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fed2 	bl	8004b0c <HAL_I2C_MemTxCpltCallback>
}
 8004d68:	e006      	b.n	8004d78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fe8a 	bl	8004a8c <HAL_I2C_MasterTxCpltCallback>
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11d      	bne.n	8004dd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10b      	bne.n	8004db8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	1c9a      	adds	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004db6:	e073      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	121b      	asrs	r3, r3, #8
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004dd2:	e065      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10b      	bne.n	8004df4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004df2:	e055      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d151      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b22      	cmp	r3, #34	; 0x22
 8004e00:	d10d      	bne.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e1c:	e040      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b21      	cmp	r3, #33	; 0x21
 8004e2c:	d112      	bne.n	8004e54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	781a      	ldrb	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e52:	e025      	b.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d120      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b21      	cmp	r3, #33	; 0x21
 8004e62:	d11d      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fe36 	bl	8004b0c <HAL_I2C_MemTxCpltCallback>
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b22      	cmp	r3, #34	; 0x22
 8004eba:	f040 80ac 	bne.w	8005016 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d921      	bls.n	8004f10 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	f040 808c 	bne.w	8005016 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f0e:	e082      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d075      	beq.n	8005004 <I2C_MasterReceive_RXNE+0x15c>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d002      	beq.n	8004f24 <I2C_MasterReceive_RXNE+0x7c>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d16f      	bne.n	8005004 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 fafd 	bl	8006524 <I2C_WaitOnSTOPRequestThroughIT>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d142      	bne.n	8004fb6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d10a      	bne.n	8004fa0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fdc1 	bl	8004b20 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f9e:	e03a      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2212      	movs	r2, #18
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fd76 	bl	8004aa0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fb4:	e02f      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff fd99 	bl	8004b34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005002:	e008      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005012:	605a      	str	r2, [r3, #4]
}
 8005014:	e7ff      	b.n	8005016 <I2C_MasterReceive_RXNE+0x16e>
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b04      	cmp	r3, #4
 8005034:	d11b      	bne.n	800506e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005044:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800506c:	e0bd      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d129      	bne.n	80050cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005086:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b04      	cmp	r3, #4
 800508c:	d00a      	beq.n	80050a4 <I2C_MasterReceive_BTF+0x86>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d007      	beq.n	80050a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050ca:	e08e      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d176      	bne.n	80051c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d002      	beq.n	80050e2 <I2C_MasterReceive_BTF+0xc4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d108      	bne.n	80050f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e019      	b.n	8005128 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d002      	beq.n	8005100 <I2C_MasterReceive_BTF+0xe2>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d108      	bne.n	8005112 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e00a      	b.n	8005128 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b10      	cmp	r3, #16
 8005116:	d007      	beq.n	8005128 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005126:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005182:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b40      	cmp	r3, #64	; 0x40
 8005196:	d10a      	bne.n	80051ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff fcba 	bl	8004b20 <HAL_I2C_MemRxCpltCallback>
}
 80051ac:	e01d      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2212      	movs	r2, #18
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff fc6f 	bl	8004aa0 <HAL_I2C_MasterRxCpltCallback>
}
 80051c2:	e012      	b.n	80051ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d117      	bne.n	8005236 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800521e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005220:	e067      	b.n	80052f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	b2da      	uxtb	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]
}
 8005234:	e05d      	b.n	80052f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800523e:	d133      	bne.n	80052a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b21      	cmp	r3, #33	; 0x21
 800524a:	d109      	bne.n	8005260 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800525c:	611a      	str	r2, [r3, #16]
 800525e:	e008      	b.n	8005272 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	2b00      	cmp	r3, #0
 8005278:	d004      	beq.n	8005284 <I2C_Master_SB+0x92>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d032      	beq.n	80052f2 <I2C_Master_SB+0x100>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d02d      	beq.n	80052f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a4:	605a      	str	r2, [r3, #4]
}
 80052a6:	e024      	b.n	80052f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10e      	bne.n	80052ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	11db      	asrs	r3, r3, #7
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0306 	and.w	r3, r3, #6
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f063 030f 	orn	r3, r3, #15
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]
}
 80052cc:	e011      	b.n	80052f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10d      	bne.n	80052f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	b29b      	uxth	r3, r3
 80052dc:	11db      	asrs	r3, r3, #7
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0306 	and.w	r3, r3, #6
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f063 030e 	orn	r3, r3, #14
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	611a      	str	r2, [r3, #16]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	b2da      	uxtb	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <I2C_Master_ADD10+0x26>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d108      	bne.n	8005336 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <I2C_Master_ADD10+0x48>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005344:	605a      	str	r2, [r3, #4]
  }
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005352:	b480      	push	{r7}
 8005354:	b091      	sub	sp, #68	; 0x44
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b22      	cmp	r3, #34	; 0x22
 800537a:	f040 8169 	bne.w	8005650 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <I2C_Master_ADDR+0x54>
 8005386:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d10b      	bne.n	80053a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	633b      	str	r3, [r7, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	633b      	str	r3, [r7, #48]	; 0x30
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	e160      	b.n	8005668 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11d      	bne.n	80053ea <I2C_Master_ADDR+0x98>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053b6:	d118      	bne.n	80053ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b8:	2300      	movs	r3, #0
 80053ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	651a      	str	r2, [r3, #80]	; 0x50
 80053e8:	e13e      	b.n	8005668 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d113      	bne.n	800541c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f4:	2300      	movs	r3, #0
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e115      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	f040 808a 	bne.w	800553c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800542e:	d137      	bne.n	80054a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d113      	bne.n	8005478 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	e0e7      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005478:	2300      	movs	r3, #0
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	623b      	str	r3, [r7, #32]
 800548c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e0d3      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d02e      	beq.n	8005504 <I2C_Master_ADDR+0x1b2>
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d02b      	beq.n	8005504 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80054ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ae:	2b12      	cmp	r3, #18
 80054b0:	d102      	bne.n	80054b8 <I2C_Master_ADDR+0x166>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d125      	bne.n	8005504 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d00e      	beq.n	80054dc <I2C_Master_ADDR+0x18a>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d00b      	beq.n	80054dc <I2C_Master_ADDR+0x18a>
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d008      	beq.n	80054dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e007      	b.n	80054ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	e0a1      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e085      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d14d      	bne.n	80055e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	2b04      	cmp	r3, #4
 800554a:	d016      	beq.n	800557a <I2C_Master_ADDR+0x228>
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	2b02      	cmp	r3, #2
 8005550:	d013      	beq.n	800557a <I2C_Master_ADDR+0x228>
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b10      	cmp	r3, #16
 8005556:	d010      	beq.n	800557a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005566:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e007      	b.n	800558a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005588:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005598:	d117      	bne.n	80055ca <I2C_Master_ADDR+0x278>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a0:	d00b      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d008      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d005      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d002      	beq.n	80055ba <I2C_Master_ADDR+0x268>
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d107      	bne.n	80055ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	e032      	b.n	8005648 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d117      	bne.n	8005632 <I2C_Master_ADDR+0x2e0>
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005608:	d00b      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b01      	cmp	r3, #1
 800560e:	d008      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	2b08      	cmp	r3, #8
 8005614:	d005      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	2b10      	cmp	r3, #16
 800561a:	d002      	beq.n	8005622 <I2C_Master_ADDR+0x2d0>
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	2b20      	cmp	r3, #32
 8005620:	d107      	bne.n	8005632 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005630:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800564e:	e00b      	b.n	8005668 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	e7ff      	b.n	8005668 <I2C_Master_ADDR+0x316>
 8005668:	bf00      	nop
 800566a:	3744      	adds	r7, #68	; 0x44
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02b      	beq.n	80056e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d114      	bne.n	80056e6 <I2C_SlaveTransmit_TXE+0x72>
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b29      	cmp	r3, #41	; 0x29
 80056c0:	d111      	bne.n	80056e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2221      	movs	r2, #33	; 0x21
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2228      	movs	r2, #40	; 0x28
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff f9e7 	bl	8004ab4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d011      	beq.n	8005724 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02c      	beq.n	80057a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d114      	bne.n	80057a4 <I2C_SlaveReceive_RXNE+0x74>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b2a      	cmp	r3, #42	; 0x2a
 800577e:	d111      	bne.n	80057a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2222      	movs	r2, #34	; 0x22
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2228      	movs	r2, #40	; 0x28
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff f992 	bl	8004ac8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d012      	beq.n	80057e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800580a:	2b28      	cmp	r3, #40	; 0x28
 800580c:	d127      	bne.n	800585e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800582a:	2301      	movs	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	09db      	lsrs	r3, r3, #7
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	81bb      	strh	r3, [r7, #12]
 8005840:	e002      	b.n	8005848 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005850:	89ba      	ldrh	r2, [r7, #12]
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff f940 	bl	8004adc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800585c:	e00e      	b.n	800587c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058a4:	2300      	movs	r3, #0
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e0:	d172      	bne.n	80059c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b22      	cmp	r3, #34	; 0x22
 80058e6:	d002      	beq.n	80058ee <I2C_Slave_STOPF+0x6a>
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b2a      	cmp	r3, #42	; 0x2a
 80058ec:	d135      	bne.n	800595a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0204 	orr.w	r2, r3, #4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005920:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	4618      	mov	r0, r3
 8005928:	f7fd ffa8 	bl	800387c <HAL_DMA_GetState>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d049      	beq.n	80059c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	4a69      	ldr	r2, [pc, #420]	; (8005adc <I2C_Slave_STOPF+0x258>)
 8005938:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	4618      	mov	r0, r3
 8005940:	f7fd fdf0 	bl	8003524 <HAL_DMA_Abort_IT>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d03d      	beq.n	80059c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005954:	4610      	mov	r0, r2
 8005956:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005958:	e035      	b.n	80059c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f043 0204 	orr.w	r2, r3, #4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800598c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	4618      	mov	r0, r3
 8005994:	f7fd ff72 	bl	800387c <HAL_DMA_GetState>
 8005998:	4603      	mov	r3, r0
 800599a:	2b01      	cmp	r3, #1
 800599c:	d014      	beq.n	80059c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	4a4e      	ldr	r2, [pc, #312]	; (8005adc <I2C_Slave_STOPF+0x258>)
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fd fdba 	bl	8003524 <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
 80059c4:	e000      	b.n	80059c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d03e      	beq.n	8005a50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d112      	bne.n	8005a06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d112      	bne.n	8005a3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f043 0204 	orr.w	r2, r3, #4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f8b3 	bl	8005bc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a5e:	e039      	b.n	8005ad4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b2a      	cmp	r3, #42	; 0x2a
 8005a64:	d109      	bne.n	8005a7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2228      	movs	r2, #40	; 0x28
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f827 	bl	8004ac8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b28      	cmp	r3, #40	; 0x28
 8005a84:	d111      	bne.n	8005aaa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <I2C_Slave_STOPF+0x25c>)
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff f828 	bl	8004af8 <HAL_I2C_ListenCpltCallback>
}
 8005aa8:	e014      	b.n	8005ad4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	2b22      	cmp	r3, #34	; 0x22
 8005ab0:	d002      	beq.n	8005ab8 <I2C_Slave_STOPF+0x234>
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b22      	cmp	r3, #34	; 0x22
 8005ab6:	d10d      	bne.n	8005ad4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fe fffa 	bl	8004ac8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	08006125 	.word	0x08006125
 8005ae0:	ffff0000 	.word	0xffff0000

08005ae4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d002      	beq.n	8005b06 <I2C_Slave_AF+0x22>
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d129      	bne.n	8005b5a <I2C_Slave_AF+0x76>
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	2b28      	cmp	r3, #40	; 0x28
 8005b0a:	d126      	bne.n	8005b5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a2c      	ldr	r2, [pc, #176]	; (8005bc0 <I2C_Slave_AF+0xdc>)
 8005b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fe ffd0 	bl	8004af8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b58:	e02e      	b.n	8005bb8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b21      	cmp	r3, #33	; 0x21
 8005b5e:	d126      	bne.n	8005bae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <I2C_Slave_AF+0xdc>)
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2221      	movs	r2, #33	; 0x21
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fe ff84 	bl	8004ab4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005bac:	e004      	b.n	8005bb8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bb6:	615a      	str	r2, [r3, #20]
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	ffff0000 	.word	0xffff0000

08005bc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d002      	beq.n	8005be8 <I2C_ITError+0x24>
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d10a      	bne.n	8005bfe <I2C_ITError+0x3a>
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b22      	cmp	r3, #34	; 0x22
 8005bec:	d107      	bne.n	8005bfe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bfc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c04:	2b28      	cmp	r3, #40	; 0x28
 8005c06:	d107      	bne.n	8005c18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2228      	movs	r2, #40	; 0x28
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c16:	e015      	b.n	8005c44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c26:	d00a      	beq.n	8005c3e <I2C_ITError+0x7a>
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2b60      	cmp	r3, #96	; 0x60
 8005c2c:	d007      	beq.n	8005c3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c52:	d162      	bne.n	8005d1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d020      	beq.n	8005cb4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c76:	4a6a      	ldr	r2, [pc, #424]	; (8005e20 <I2C_ITError+0x25c>)
 8005c78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fd fc50 	bl	8003524 <HAL_DMA_Abort_IT>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8089 	beq.w	8005d9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4798      	blx	r3
 8005cb2:	e074      	b.n	8005d9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <I2C_ITError+0x25c>)
 8005cba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fd fc2f 	bl	8003524 <HAL_DMA_Abort_IT>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d068      	beq.n	8005d9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd6:	2b40      	cmp	r3, #64	; 0x40
 8005cd8:	d10b      	bne.n	8005cf2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	e041      	b.n	8005d9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b60      	cmp	r3, #96	; 0x60
 8005d24:	d125      	bne.n	8005d72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d10b      	bne.n	8005d5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fe feec 	bl	8004b48 <HAL_I2C_AbortCpltCallback>
 8005d70:	e015      	b.n	8005d9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d10b      	bne.n	8005d98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7fe fecb 	bl	8004b34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10e      	bne.n	8005dcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d113      	bne.n	8005e18 <I2C_ITError+0x254>
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b28      	cmp	r3, #40	; 0x28
 8005df4:	d110      	bne.n	8005e18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <I2C_ITError+0x260>)
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fe fe70 	bl	8004af8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	08006125 	.word	0x08006125
 8005e24:	ffff0000 	.word	0xffff0000

08005e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	817b      	strh	r3, [r7, #10]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	813b      	strh	r3, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fa08 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e78:	d103      	bne.n	8005e82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e05f      	b.n	8005f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e86:	897b      	ldrh	r3, [r7, #10]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	492d      	ldr	r1, [pc, #180]	; (8005f50 <I2C_RequestMemoryWrite+0x128>)
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa40 	bl	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e04c      	b.n	8005f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	6a39      	ldr	r1, [r7, #32]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 faaa 	bl	8006420 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d107      	bne.n	8005eea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e02b      	b.n	8005f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d105      	bne.n	8005f00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef4:	893b      	ldrh	r3, [r7, #8]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	e021      	b.n	8005f44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f00:	893b      	ldrh	r3, [r7, #8]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	6a39      	ldr	r1, [r7, #32]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fa84 	bl	8006420 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d107      	bne.n	8005f36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e005      	b.n	8005f46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f3a:	893b      	ldrh	r3, [r7, #8]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	00010002 	.word	0x00010002

08005f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	817b      	strh	r3, [r7, #10]
 8005f66:	460b      	mov	r3, r1
 8005f68:	813b      	strh	r3, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f96a 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb4:	d103      	bne.n	8005fbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0aa      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	4952      	ldr	r1, [pc, #328]	; (8006120 <I2C_RequestMemoryRead+0x1cc>)
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f9a2 	bl	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e097      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006000:	6a39      	ldr	r1, [r7, #32]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fa0c 	bl	8006420 <I2C_WaitOnTXEFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b04      	cmp	r3, #4
 8006014:	d107      	bne.n	8006026 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e076      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	611a      	str	r2, [r3, #16]
 800603a:	e021      	b.n	8006080 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800603c:	893b      	ldrh	r3, [r7, #8]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	b29b      	uxth	r3, r3
 8006042:	b2da      	uxtb	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	6a39      	ldr	r1, [r7, #32]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f9e6 	bl	8006420 <I2C_WaitOnTXEFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b04      	cmp	r3, #4
 8006060:	d107      	bne.n	8006072 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e050      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006076:	893b      	ldrh	r3, [r7, #8]
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	6a39      	ldr	r1, [r7, #32]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f9cb 	bl	8006420 <I2C_WaitOnTXEFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	2b04      	cmp	r3, #4
 8006096:	d107      	bne.n	80060a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e035      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f8d3 	bl	8006274 <I2C_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00d      	beq.n	80060f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e2:	d103      	bne.n	80060ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e013      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060f0:	897b      	ldrh	r3, [r7, #10]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	4906      	ldr	r1, [pc, #24]	; (8006120 <I2C_RequestMemoryRead+0x1cc>)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f90b 	bl	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	00010002 	.word	0x00010002

08006124 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800613e:	4b4b      	ldr	r3, [pc, #300]	; (800626c <I2C_DMAAbort+0x148>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	08db      	lsrs	r3, r3, #3
 8006144:	4a4a      	ldr	r2, [pc, #296]	; (8006270 <I2C_DMAAbort+0x14c>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	0a1a      	lsrs	r2, r3, #8
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	00da      	lsls	r2, r3, #3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f043 0220 	orr.w	r2, r3, #32
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800616a:	e00a      	b.n	8006182 <I2C_DMAAbort+0x5e>
    }
    count--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b01      	subs	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006180:	d0ea      	beq.n	8006158 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	2200      	movs	r2, #0
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	2200      	movs	r2, #0
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	2200      	movs	r2, #0
 80061c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	2200      	movs	r2, #0
 80061d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b60      	cmp	r3, #96	; 0x60
 80061f2:	d10e      	bne.n	8006212 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f7fe fc9c 	bl	8004b48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006210:	e027      	b.n	8006262 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006212:	7cfb      	ldrb	r3, [r7, #19]
 8006214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006218:	2b28      	cmp	r3, #40	; 0x28
 800621a:	d117      	bne.n	800624c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800623a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2228      	movs	r2, #40	; 0x28
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800624a:	e007      	b.n	800625c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800625c:	6978      	ldr	r0, [r7, #20]
 800625e:	f7fe fc69 	bl	8004b34 <HAL_I2C_ErrorCallback>
}
 8006262:	bf00      	nop
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000024 	.word	0x20000024
 8006270:	14f8b589 	.word	0x14f8b589

08006274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006284:	e025      	b.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d021      	beq.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fc fa73 	bl	8002778 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e023      	b.n	800631a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10d      	bne.n	80062f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	43da      	mvns	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf0c      	ite	eq
 80062ee:	2301      	moveq	r3, #1
 80062f0:	2300      	movne	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	e00c      	b.n	8006312 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	43da      	mvns	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4013      	ands	r3, r2
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf0c      	ite	eq
 800630a:	2301      	moveq	r3, #1
 800630c:	2300      	movne	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	429a      	cmp	r2, r3
 8006316:	d0b6      	beq.n	8006286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006330:	e051      	b.n	80063d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800633c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006340:	d123      	bne.n	800638a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006350:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800635a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f043 0204 	orr.w	r2, r3, #4
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e046      	b.n	8006418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d021      	beq.n	80063d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fc f9f1 	bl	8002778 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d116      	bne.n	80063d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e020      	b.n	8006418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d10c      	bne.n	80063fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	43da      	mvns	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	e00b      	b.n	8006412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	43da      	mvns	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d18d      	bne.n	8006332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800642c:	e02d      	b.n	800648a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f900 	bl	8006634 <I2C_IsAcknowledgeFailed>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e02d      	b.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d021      	beq.n	800648a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006446:	f7fc f997 	bl	8002778 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d116      	bne.n	800648a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f043 0220 	orr.w	r2, r3, #32
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e007      	b.n	800649a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d1ca      	bne.n	800642e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064ae:	e02d      	b.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f8bf 	bl	8006634 <I2C_IsAcknowledgeFailed>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e02d      	b.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c6:	d021      	beq.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c8:	f7fc f956 	bl	8002778 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d302      	bcc.n	80064de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d116      	bne.n	800650c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e007      	b.n	800651c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b04      	cmp	r3, #4
 8006518:	d1ca      	bne.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	08db      	lsrs	r3, r3, #3
 8006536:	4a13      	ldr	r2, [pc, #76]	; (8006584 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	0a1a      	lsrs	r2, r3, #8
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b01      	subs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d107      	bne.n	8006562 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e008      	b.n	8006574 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006570:	d0e9      	beq.n	8006546 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	20000024 	.word	0x20000024
 8006584:	14f8b589 	.word	0x14f8b589

08006588 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006594:	e042      	b.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0310 	and.w	r3, r3, #16
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d119      	bne.n	80065d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f06f 0210 	mvn.w	r2, #16
 80065ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e029      	b.n	800662c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d8:	f7fc f8ce 	bl	8002778 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d116      	bne.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	f043 0220 	orr.w	r2, r3, #32
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e007      	b.n	800662c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d1b5      	bne.n	8006596 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d11b      	bne.n	8006684 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006654:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066a2:	d103      	bne.n	80066ac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066aa:	e007      	b.n	80066bc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066b4:	d102      	bne.n	80066bc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2208      	movs	r2, #8
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e267      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d075      	beq.n	80067d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066e6:	4b88      	ldr	r3, [pc, #544]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00c      	beq.n	800670c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f2:	4b85      	ldr	r3, [pc, #532]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d112      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fe:	4b82      	ldr	r3, [pc, #520]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670a:	d10b      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	4b7e      	ldr	r3, [pc, #504]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05b      	beq.n	80067d0 <HAL_RCC_OscConfig+0x108>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d157      	bne.n	80067d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e242      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672c:	d106      	bne.n	800673c <HAL_RCC_OscConfig+0x74>
 800672e:	4b76      	ldr	r3, [pc, #472]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a75      	ldr	r2, [pc, #468]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e01d      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0x98>
 8006746:	4b70      	ldr	r3, [pc, #448]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6f      	ldr	r2, [pc, #444]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800674c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b6d      	ldr	r3, [pc, #436]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6c      	ldr	r2, [pc, #432]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 8006760:	4b69      	ldr	r3, [pc, #420]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a68      	ldr	r2, [pc, #416]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b66      	ldr	r3, [pc, #408]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a65      	ldr	r2, [pc, #404]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7fb fffa 	bl	8002778 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006788:	f7fb fff6 	bl	8002778 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	; 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e207      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b5b      	ldr	r3, [pc, #364]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0xc0>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fb ffe6 	bl	8002778 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fb ffe2 	bl	8002778 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1f3      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	4b51      	ldr	r3, [pc, #324]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0xe8>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d063      	beq.n	80068a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067de:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b47      	ldr	r3, [pc, #284]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067f6:	4b44      	ldr	r3, [pc, #272]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006802:	4b41      	ldr	r3, [pc, #260]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e1c7      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681a:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4937      	ldr	r1, [pc, #220]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	e03a      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	4b34      	ldr	r3, [pc, #208]	; (800690c <HAL_RCC_OscConfig+0x244>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683e:	f7fb ff9b 	bl	8002778 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006846:	f7fb ff97 	bl	8002778 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1a8      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b28      	ldr	r3, [pc, #160]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4925      	ldr	r1, [pc, #148]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
 8006878:	e015      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <HAL_RCC_OscConfig+0x244>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fb ff7a 	bl	8002778 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006888:	f7fb ff76 	bl	8002778 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e187      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <HAL_RCC_OscConfig+0x248>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fb ff5a 	bl	8002778 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fb ff56 	bl	8002778 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e167      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <HAL_RCC_OscConfig+0x240>)
 80068dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x200>
 80068e6:	e01b      	b.n	8006920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e8:	4b09      	ldr	r3, [pc, #36]	; (8006910 <HAL_RCC_OscConfig+0x248>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ee:	f7fb ff43 	bl	8002778 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	e00e      	b.n	8006914 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fb ff3f 	bl	8002778 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d907      	bls.n	8006914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e150      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006908:	40023800 	.word	0x40023800
 800690c:	42470000 	.word	0x42470000
 8006910:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006914:	4b88      	ldr	r3, [pc, #544]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ea      	bne.n	80068f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8097 	beq.w	8006a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006932:	4b81      	ldr	r3, [pc, #516]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	4b7d      	ldr	r3, [pc, #500]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	4a7c      	ldr	r2, [pc, #496]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694c:	6413      	str	r3, [r2, #64]	; 0x40
 800694e:	4b7a      	ldr	r3, [pc, #488]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695e:	4b77      	ldr	r3, [pc, #476]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d118      	bne.n	800699c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800696a:	4b74      	ldr	r3, [pc, #464]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a73      	ldr	r2, [pc, #460]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006976:	f7fb feff 	bl	8002778 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697e:	f7fb fefb 	bl	8002778 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e10c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	4b6a      	ldr	r3, [pc, #424]	; (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2ea>
 80069a4:	4b64      	ldr	r3, [pc, #400]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	4a63      	ldr	r2, [pc, #396]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6713      	str	r3, [r2, #112]	; 0x70
 80069b0:	e01c      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x30c>
 80069ba:	4b5f      	ldr	r3, [pc, #380]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069be:	4a5e      	ldr	r2, [pc, #376]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	6713      	str	r3, [r2, #112]	; 0x70
 80069c6:	4b5c      	ldr	r3, [pc, #368]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a5b      	ldr	r2, [pc, #364]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	e00b      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069d4:	4b58      	ldr	r3, [pc, #352]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	4a57      	ldr	r2, [pc, #348]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6713      	str	r3, [r2, #112]	; 0x70
 80069e0:	4b55      	ldr	r3, [pc, #340]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a54      	ldr	r2, [pc, #336]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e6:	f023 0304 	bic.w	r3, r3, #4
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fb fec0 	bl	8002778 <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fb febc 	bl	8002778 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e0cb      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a12:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ee      	beq.n	80069fc <HAL_RCC_OscConfig+0x334>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a20:	f7fb feaa 	bl	8002778 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a26:	e00a      	b.n	8006a3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a28:	f7fb fea6 	bl	8002778 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0b5      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ee      	bne.n	8006a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a50:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a1 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a66:	4b34      	ldr	r3, [pc, #208]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d05c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d141      	bne.n	8006afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7a:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fb fe7a 	bl	8002778 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fb fe76 	bl	8002778 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e087      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	4b27      	ldr	r3, [pc, #156]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	019b      	lsls	r3, r3, #6
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	491b      	ldr	r1, [pc, #108]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad6:	f7fb fe4f 	bl	8002778 <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ade:	f7fb fe4b 	bl	8002778 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e05c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af0:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x416>
 8006afc:	e054      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b10      	ldr	r3, [pc, #64]	; (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7fb fe38 	bl	8002778 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fb fe34 	bl	8002778 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e045      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x444>
 8006b2a:	e03d      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e038      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	40007000 	.word	0x40007000
 8006b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <HAL_RCC_OscConfig+0x4ec>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d028      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d121      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d111      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800

08006bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0cc      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b68      	ldr	r3, [pc, #416]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d90c      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b65      	ldr	r3, [pc, #404]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b63      	ldr	r3, [pc, #396]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0b8      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c0c:	4b59      	ldr	r3, [pc, #356]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a58      	ldr	r2, [pc, #352]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c24:	4b53      	ldr	r3, [pc, #332]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a52      	ldr	r2, [pc, #328]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c30:	4b50      	ldr	r3, [pc, #320]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	494d      	ldr	r1, [pc, #308]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d044      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d119      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e07f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c76:	4b3f      	ldr	r3, [pc, #252]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e06f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c86:	4b3b      	ldr	r3, [pc, #236]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e067      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c96:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4934      	ldr	r1, [pc, #208]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ca8:	f7fb fd66 	bl	8002778 <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb0:	f7fb fd62 	bl	8002778 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e04f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 020c 	and.w	r2, r3, #12
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1eb      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b25      	ldr	r3, [pc, #148]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20c      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e032      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d0c:	4b19      	ldr	r3, [pc, #100]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4916      	ldr	r1, [pc, #88]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d2a:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	490e      	ldr	r1, [pc, #56]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d3e:	f000 f821 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490a      	ldr	r1, [pc, #40]	; (8006d78 <HAL_RCC_ClockConfig+0x1c0>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <HAL_RCC_ClockConfig+0x1c4>)
 8006d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fb fcc6 	bl	80026f0 <HAL_InitTick>

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023c00 	.word	0x40023c00
 8006d74:	40023800 	.word	0x40023800
 8006d78:	08009e84 	.word	0x08009e84
 8006d7c:	20000024 	.word	0x20000024
 8006d80:	20000028 	.word	0x20000028

08006d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b090      	sub	sp, #64	; 0x40
 8006d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d94:	2300      	movs	r3, #0
 8006d96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9c:	4b59      	ldr	r3, [pc, #356]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 030c 	and.w	r3, r3, #12
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d00d      	beq.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	f200 80a1 	bhi.w	8006ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x34>
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8006db6:	e09b      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db8:	4b53      	ldr	r3, [pc, #332]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006dbc:	e09b      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dbe:	4b53      	ldr	r3, [pc, #332]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dc2:	e098      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc4:	4b4f      	ldr	r3, [pc, #316]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dce:	4b4d      	ldr	r3, [pc, #308]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dda:	4b4a      	ldr	r3, [pc, #296]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	2200      	movs	r2, #0
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	627a      	str	r2, [r7, #36]	; 0x24
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dec:	2100      	movs	r1, #0
 8006dee:	4b47      	ldr	r3, [pc, #284]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006df0:	fb03 f201 	mul.w	r2, r3, r1
 8006df4:	2300      	movs	r3, #0
 8006df6:	fb00 f303 	mul.w	r3, r0, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4a43      	ldr	r2, [pc, #268]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8006e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e04:	460a      	mov	r2, r1
 8006e06:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	2200      	movs	r2, #0
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	61fa      	str	r2, [r7, #28]
 8006e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e1e:	f7f9 feeb 	bl	8000bf8 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4613      	mov	r3, r2
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2a:	e053      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2c:	4b35      	ldr	r3, [pc, #212]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	099b      	lsrs	r3, r3, #6
 8006e32:	2200      	movs	r2, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	617a      	str	r2, [r7, #20]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e3e:	f04f 0b00 	mov.w	fp, #0
 8006e42:	4652      	mov	r2, sl
 8006e44:	465b      	mov	r3, fp
 8006e46:	f04f 0000 	mov.w	r0, #0
 8006e4a:	f04f 0100 	mov.w	r1, #0
 8006e4e:	0159      	lsls	r1, r3, #5
 8006e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e54:	0150      	lsls	r0, r2, #5
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8006e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e76:	ebb2 0408 	subs.w	r4, r2, r8
 8006e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	00eb      	lsls	r3, r5, #3
 8006e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e8c:	00e2      	lsls	r2, r4, #3
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	eb14 030a 	adds.w	r3, r4, sl
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	eb45 030b 	adc.w	r3, r5, fp
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eaa:	4629      	mov	r1, r5
 8006eac:	028b      	lsls	r3, r1, #10
 8006eae:	4621      	mov	r1, r4
 8006eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	028a      	lsls	r2, r1, #10
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	60fa      	str	r2, [r7, #12]
 8006ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec8:	f7f9 fe96 	bl	8000bf8 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	3301      	adds	r3, #1
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006eee:	e002      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3740      	adds	r7, #64	; 0x40
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800
 8006f08:	00f42400 	.word	0x00f42400
 8006f0c:	017d7840 	.word	0x017d7840

08006f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f14:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f16:	681b      	ldr	r3, [r3, #0]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000024 	.word	0x20000024

08006f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f2c:	f7ff fff0 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	0a9b      	lsrs	r3, r3, #10
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4903      	ldr	r1, [pc, #12]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	08009e94 	.word	0x08009e94

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f54:	f7ff ffdc 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	0b5b      	lsrs	r3, r3, #13
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4903      	ldr	r1, [pc, #12]	; (8006f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40023800 	.word	0x40023800
 8006f74:	08009e94 	.word	0x08009e94

08006f78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d105      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d038      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fa0:	4b68      	ldr	r3, [pc, #416]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fa6:	f7fb fbe7 	bl	8002778 <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fac:	e008      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fae:	f7fb fbe3 	bl	8002778 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e0bd      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fc0:	4b61      	ldr	r3, [pc, #388]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f0      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	019b      	lsls	r3, r3, #6
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	071b      	lsls	r3, r3, #28
 8006fde:	495a      	ldr	r1, [pc, #360]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fe6:	4b57      	ldr	r3, [pc, #348]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fec:	f7fb fbc4 	bl	8002778 <HAL_GetTick>
 8006ff0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ff4:	f7fb fbc0 	bl	8002778 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e09a      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007006:	4b50      	ldr	r3, [pc, #320]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8083 	beq.w	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	4b48      	ldr	r3, [pc, #288]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	4a47      	ldr	r2, [pc, #284]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702e:	6413      	str	r3, [r2, #64]	; 0x40
 8007030:	4b45      	ldr	r3, [pc, #276]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800703c:	4b43      	ldr	r3, [pc, #268]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a42      	ldr	r2, [pc, #264]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007046:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007048:	f7fb fb96 	bl	8002778 <HAL_GetTick>
 800704c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007050:	f7fb fb92 	bl	8002778 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e06c      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007062:	4b3a      	ldr	r3, [pc, #232]	; (800714c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800706e:	4b36      	ldr	r3, [pc, #216]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007076:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d02f      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	429a      	cmp	r2, r3
 800708a:	d028      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800708c:	4b2e      	ldr	r3, [pc, #184]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007094:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007096:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800709c:	4b2c      	ldr	r3, [pc, #176]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070a2:	4a29      	ldr	r2, [pc, #164]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070a8:	4b27      	ldr	r3, [pc, #156]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d114      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070b4:	f7fb fb60 	bl	8002778 <HAL_GetTick>
 80070b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ba:	e00a      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070bc:	f7fb fb5c 	bl	8002778 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e034      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d2:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0ee      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ea:	d10d      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80070ec:	4b16      	ldr	r3, [pc, #88]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007100:	4911      	ldr	r1, [pc, #68]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]
 8007106:	e005      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4a0e      	ldr	r2, [pc, #56]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007112:	6093      	str	r3, [r2, #8]
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007120:	4909      	ldr	r1, [pc, #36]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007122:	4313      	orrs	r3, r2
 8007124:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7d1a      	ldrb	r2, [r3, #20]
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007138:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	42470068 	.word	0x42470068
 8007148:	40023800 	.word	0x40023800
 800714c:	40007000 	.word	0x40007000
 8007150:	42470e40 	.word	0x42470e40
 8007154:	424711e0 	.word	0x424711e0

08007158 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e066      	b.n	800723c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	7f5b      	ldrb	r3, [r3, #29]
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fa fe56 	bl	8001e30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	22ca      	movs	r2, #202	; 0xca
 8007190:	625a      	str	r2, [r3, #36]	; 0x24
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2253      	movs	r2, #83	; 0x53
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f87a 	bl	8007294 <RTC_EnterInitMode>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d12c      	bne.n	8007204 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6899      	ldr	r1, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68d2      	ldr	r2, [r2, #12]
 80071e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6919      	ldr	r1, [r3, #16]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	041a      	lsls	r2, r3, #16
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f881 	bl	8007302 <RTC_ExitInitMode>
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007204:	7bfb      	ldrb	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d113      	bne.n	8007232 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	22ff      	movs	r2, #255	; 0xff
 8007238:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800725e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007260:	f7fb fa8a 	bl	8002778 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007266:	e009      	b.n	800727c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007268:	f7fb fa86 	bl	8002778 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007276:	d901      	bls.n	800727c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e007      	b.n	800728c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f003 0320 	and.w	r3, r3, #32
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ee      	beq.n	8007268 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d122      	bne.n	80072f8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072c0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072c2:	f7fb fa59 	bl	8002778 <HAL_GetTick>
 80072c6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072c8:	e00c      	b.n	80072e4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072ca:	f7fb fa55 	bl	8002778 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072d8:	d904      	bls.n	80072e4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2204      	movs	r2, #4
 80072de:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <RTC_EnterInitMode+0x64>
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d1e8      	bne.n	80072ca <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800731c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff ff89 	bl	8007244 <HAL_RTC_WaitForSynchro>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d004      	beq.n	8007342 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2204      	movs	r2, #4
 800733c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e041      	b.n	80073e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fa ff2a 	bl	80021cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f000 fa88 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d001      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e044      	b.n	800748e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1e      	ldr	r2, [pc, #120]	; (800749c <HAL_TIM_Base_Start_IT+0xb0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d018      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x6c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742e:	d013      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x6c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00e      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x6c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a19      	ldr	r2, [pc, #100]	; (80074a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d009      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x6c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_TIM_Base_Start_IT+0x6c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a16      	ldr	r2, [pc, #88]	; (80074ac <HAL_TIM_Base_Start_IT+0xc0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d111      	bne.n	800747c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0307 	and.w	r3, r3, #7
 8007462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b06      	cmp	r3, #6
 8007468:	d010      	beq.n	800748c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0201 	orr.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800747a:	e007      	b.n	800748c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800
 80074a8:	40000c00 	.word	0x40000c00
 80074ac:	40014000 	.word	0x40014000

080074b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d122      	bne.n	800750c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d11b      	bne.n	800750c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0202 	mvn.w	r2, #2
 80074dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f003 0303 	and.w	r3, r3, #3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9b5 	bl	8007862 <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9a7 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f9b8 	bl	8007876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b04      	cmp	r3, #4
 8007518:	d122      	bne.n	8007560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b04      	cmp	r3, #4
 8007526:	d11b      	bne.n	8007560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0204 	mvn.w	r2, #4
 8007530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f98b 	bl	8007862 <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f97d 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f98e 	bl	8007876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b08      	cmp	r3, #8
 800756c:	d122      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b08      	cmp	r3, #8
 800757a:	d11b      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0208 	mvn.w	r2, #8
 8007584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2204      	movs	r2, #4
 800758a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f961 	bl	8007862 <HAL_TIM_IC_CaptureCallback>
 80075a0:	e005      	b.n	80075ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f953 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f964 	bl	8007876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0310 	and.w	r3, r3, #16
 80075be:	2b10      	cmp	r3, #16
 80075c0:	d122      	bne.n	8007608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d11b      	bne.n	8007608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0210 	mvn.w	r2, #16
 80075d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2208      	movs	r2, #8
 80075de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f937 	bl	8007862 <HAL_TIM_IC_CaptureCallback>
 80075f4:	e005      	b.n	8007602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f929 	bl	800784e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f93a 	bl	8007876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b01      	cmp	r3, #1
 8007614:	d10e      	bne.n	8007634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d107      	bne.n	8007634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f06f 0201 	mvn.w	r2, #1
 800762c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa fe10 	bl	8002254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	2b80      	cmp	r3, #128	; 0x80
 8007640:	d10e      	bne.n	8007660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d107      	bne.n	8007660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fab2 	bl	8007bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d10e      	bne.n	800768c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b40      	cmp	r3, #64	; 0x40
 800767a:	d107      	bne.n	800768c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8ff 	bl	800788a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b20      	cmp	r3, #32
 8007698:	d10e      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b20      	cmp	r3, #32
 80076a6:	d107      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0220 	mvn.w	r2, #32
 80076b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fa7c 	bl	8007bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIM_ConfigClockSource+0x1c>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0b4      	b.n	8007846 <HAL_TIM_ConfigClockSource+0x186>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007714:	d03e      	beq.n	8007794 <HAL_TIM_ConfigClockSource+0xd4>
 8007716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771a:	f200 8087 	bhi.w	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800771e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007722:	f000 8086 	beq.w	8007832 <HAL_TIM_ConfigClockSource+0x172>
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772a:	d87f      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800772c:	2b70      	cmp	r3, #112	; 0x70
 800772e:	d01a      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xa6>
 8007730:	2b70      	cmp	r3, #112	; 0x70
 8007732:	d87b      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007734:	2b60      	cmp	r3, #96	; 0x60
 8007736:	d050      	beq.n	80077da <HAL_TIM_ConfigClockSource+0x11a>
 8007738:	2b60      	cmp	r3, #96	; 0x60
 800773a:	d877      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800773c:	2b50      	cmp	r3, #80	; 0x50
 800773e:	d03c      	beq.n	80077ba <HAL_TIM_ConfigClockSource+0xfa>
 8007740:	2b50      	cmp	r3, #80	; 0x50
 8007742:	d873      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	d058      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x13a>
 8007748:	2b40      	cmp	r3, #64	; 0x40
 800774a:	d86f      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800774c:	2b30      	cmp	r3, #48	; 0x30
 800774e:	d064      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007750:	2b30      	cmp	r3, #48	; 0x30
 8007752:	d86b      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d060      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007758:	2b20      	cmp	r3, #32
 800775a:	d867      	bhi.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
 800775c:	2b00      	cmp	r3, #0
 800775e:	d05c      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007760:	2b10      	cmp	r3, #16
 8007762:	d05a      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x15a>
 8007764:	e062      	b.n	800782c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6899      	ldr	r1, [r3, #8]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f000 f98d 	bl	8007a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	609a      	str	r2, [r3, #8]
      break;
 8007792:	e04f      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6818      	ldr	r0, [r3, #0]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	6899      	ldr	r1, [r3, #8]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f000 f976 	bl	8007a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077b6:	609a      	str	r2, [r3, #8]
      break;
 80077b8:	e03c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6818      	ldr	r0, [r3, #0]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	6859      	ldr	r1, [r3, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	461a      	mov	r2, r3
 80077c8:	f000 f8ea 	bl	80079a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2150      	movs	r1, #80	; 0x50
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f943 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 80077d8:	e02c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	6859      	ldr	r1, [r3, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f000 f909 	bl	80079fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2160      	movs	r1, #96	; 0x60
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 f933 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 80077f8:	e01c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	461a      	mov	r2, r3
 8007808:	f000 f8ca 	bl	80079a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2140      	movs	r1, #64	; 0x40
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f923 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 8007818:	e00c      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4619      	mov	r1, r3
 8007824:	4610      	mov	r0, r2
 8007826:	f000 f91a 	bl	8007a5e <TIM_ITRx_SetConfig>
      break;
 800782a:	e003      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
      break;
 8007830:	e000      	b.n	8007834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a34      	ldr	r2, [pc, #208]	; (8007984 <TIM_Base_SetConfig+0xe4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00f      	beq.n	80078d8 <TIM_Base_SetConfig+0x38>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078be:	d00b      	beq.n	80078d8 <TIM_Base_SetConfig+0x38>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a31      	ldr	r2, [pc, #196]	; (8007988 <TIM_Base_SetConfig+0xe8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d007      	beq.n	80078d8 <TIM_Base_SetConfig+0x38>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a30      	ldr	r2, [pc, #192]	; (800798c <TIM_Base_SetConfig+0xec>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_Base_SetConfig+0x38>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a2f      	ldr	r2, [pc, #188]	; (8007990 <TIM_Base_SetConfig+0xf0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d108      	bne.n	80078ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a25      	ldr	r2, [pc, #148]	; (8007984 <TIM_Base_SetConfig+0xe4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01b      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f8:	d017      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a22      	ldr	r2, [pc, #136]	; (8007988 <TIM_Base_SetConfig+0xe8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a21      	ldr	r2, [pc, #132]	; (800798c <TIM_Base_SetConfig+0xec>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00f      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a20      	ldr	r2, [pc, #128]	; (8007990 <TIM_Base_SetConfig+0xf0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00b      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <TIM_Base_SetConfig+0xf4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d007      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <TIM_Base_SetConfig+0xf8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1d      	ldr	r2, [pc, #116]	; (800799c <TIM_Base_SetConfig+0xfc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d108      	bne.n	800793c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a08      	ldr	r2, [pc, #32]	; (8007984 <TIM_Base_SetConfig+0xe4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d103      	bne.n	8007970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	615a      	str	r2, [r3, #20]
}
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800

080079a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f023 0201 	bic.w	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 030a 	bic.w	r3, r3, #10
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b087      	sub	sp, #28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f023 0210 	bic.w	r2, r3, #16
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	031b      	lsls	r3, r3, #12
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b085      	sub	sp, #20
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f043 0307 	orr.w	r3, r3, #7
 8007a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	609a      	str	r2, [r3, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	021a      	lsls	r2, r3, #8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e050      	b.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d013      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a18      	ldr	r2, [pc, #96]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a13      	ldr	r2, [pc, #76]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10c      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40014000 	.word	0x40014000

08007bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e03f      	b.n	8007c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fa fc0c 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2224      	movs	r2, #36	; 0x24
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 ff57 	bl	8008ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695a      	ldr	r2, [r3, #20]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08c      	sub	sp, #48	; 0x30
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d165      	bne.n	8007d5a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_UART_Transmit_DMA+0x26>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e05e      	b.n	8007d5c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_UART_Transmit_DMA+0x38>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e057      	b.n	8007d5c <HAL_UART_Transmit_DMA+0xe8>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	88fa      	ldrh	r2, [r7, #6]
 8007cbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	88fa      	ldrh	r2, [r7, #6]
 8007cc4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2221      	movs	r2, #33	; 0x21
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	4a22      	ldr	r2, [pc, #136]	; (8007d64 <HAL_UART_Transmit_DMA+0xf0>)
 8007cda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce0:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <HAL_UART_Transmit_DMA+0xf4>)
 8007ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce8:	4a20      	ldr	r2, [pc, #128]	; (8007d6c <HAL_UART_Transmit_DMA+0xf8>)
 8007cea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007cf4:	f107 0308 	add.w	r3, r7, #8
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3304      	adds	r3, #4
 8007d08:	461a      	mov	r2, r3
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	f7fb fb42 	bl	8003394 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d18:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	617b      	str	r3, [r7, #20]
   return(result);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3314      	adds	r3, #20
 8007d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d42:	627a      	str	r2, [r7, #36]	; 0x24
 8007d44:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6a39      	ldr	r1, [r7, #32]
 8007d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e5      	bne.n	8007d22 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e000      	b.n	8007d5c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
  }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3730      	adds	r7, #48	; 0x30
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	08008369 	.word	0x08008369
 8007d68:	08008403 	.word	0x08008403
 8007d6c:	0800857b 	.word	0x0800857b

08007d70 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d11d      	bne.n	8007dc6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_UART_Receive_DMA+0x26>
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e016      	b.n	8007dc8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d101      	bne.n	8007da8 <HAL_UART_Receive_DMA+0x38>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e00f      	b.n	8007dc8 <HAL_UART_Receive_DMA+0x58>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	461a      	mov	r2, r3
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 fc27 	bl	8008610 <UART_Start_Receive_DMA>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	e000      	b.n	8007dc8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007dc6:	2302      	movs	r3, #2
  }
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b0ba      	sub	sp, #232	; 0xe8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10f      	bne.n	8007e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <HAL_UART_IRQHandler+0x66>
 8007e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fd93 	bl	800895a <UART_Receive_IT>
      return;
 8007e34:	e256      	b.n	80082e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80de 	beq.w	8007ffc <HAL_UART_IRQHandler+0x22c>
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80d1 	beq.w	8007ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00b      	beq.n	8007e7e <HAL_UART_IRQHandler+0xae>
 8007e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d005      	beq.n	8007e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e76:	f043 0201 	orr.w	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <HAL_UART_IRQHandler+0xd2>
 8007e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	f043 0202 	orr.w	r2, r3, #2
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00b      	beq.n	8007ec6 <HAL_UART_IRQHandler+0xf6>
 8007eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d005      	beq.n	8007ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	f043 0204 	orr.w	r2, r3, #4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d011      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x126>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d105      	bne.n	8007eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	f043 0208 	orr.w	r2, r3, #8
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 81ed 	beq.w	80082da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <HAL_UART_IRQHandler+0x14e>
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fd1e 	bl	800895a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	bf0c      	ite	eq
 8007f2c:	2301      	moveq	r3, #1
 8007f2e:	2300      	movne	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d103      	bne.n	8007f4a <HAL_UART_IRQHandler+0x17a>
 8007f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d04f      	beq.n	8007fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fc26 	bl	800879c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d141      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3314      	adds	r3, #20
 8007f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1d9      	bne.n	8007f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d013      	beq.n	8007fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	4a7d      	ldr	r2, [pc, #500]	; (80081ac <HAL_UART_IRQHandler+0x3dc>)
 8007fb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fb fab0 	bl	8003524 <HAL_DMA_Abort_IT>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd8:	e00e      	b.n	8007ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f9ae 	bl	800833c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe0:	e00a      	b.n	8007ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f9aa 	bl	800833c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe8:	e006      	b.n	8007ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f9a6 	bl	800833c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ff6:	e170      	b.n	80082da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff8:	bf00      	nop
    return;
 8007ffa:	e16e      	b.n	80082da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	2b01      	cmp	r3, #1
 8008002:	f040 814a 	bne.w	800829a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8143 	beq.w	800829a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 813c 	beq.w	800829a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008022:	2300      	movs	r3, #0
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60bb      	str	r3, [r7, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	60bb      	str	r3, [r7, #8]
 8008036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	f040 80b4 	bne.w	80081b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8140 	beq.w	80082de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008066:	429a      	cmp	r2, r3
 8008068:	f080 8139 	bcs.w	80082de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008072:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807e:	f000 8088 	beq.w	8008192 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800809c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	330c      	adds	r3, #12
 80080aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1d9      	bne.n	8008082 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3314      	adds	r3, #20
 80080d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3314      	adds	r3, #20
 80080ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e1      	bne.n	80080ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3314      	adds	r3, #20
 8008110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800811a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800811c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3314      	adds	r3, #20
 800812a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800812e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800813c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e3      	bne.n	800810a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	330c      	adds	r3, #12
 8008156:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008162:	f023 0310 	bic.w	r3, r3, #16
 8008166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	330c      	adds	r3, #12
 8008170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008174:	65ba      	str	r2, [r7, #88]	; 0x58
 8008176:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800817a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e3      	bne.n	8008150 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	4618      	mov	r0, r3
 800818e:	f7fb f959 	bl	8003444 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800819a:	b29b      	uxth	r3, r3
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	b29b      	uxth	r3, r3
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f8d4 	bl	8008350 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081a8:	e099      	b.n	80082de <HAL_UART_IRQHandler+0x50e>
 80081aa:	bf00      	nop
 80081ac:	08008863 	.word	0x08008863
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 808b 	beq.w	80082e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 8086 	beq.w	80082e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	330c      	adds	r3, #12
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081fa:	647a      	str	r2, [r7, #68]	; 0x44
 80081fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e3      	bne.n	80081d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3314      	adds	r3, #20
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	623b      	str	r3, [r7, #32]
   return(result);
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3314      	adds	r3, #20
 800822e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008232:	633a      	str	r2, [r7, #48]	; 0x30
 8008234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e3      	bne.n	800820e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	330c      	adds	r3, #12
 800825a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	e853 3f00 	ldrex	r3, [r3]
 8008262:	60fb      	str	r3, [r7, #12]
   return(result);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0310 	bic.w	r3, r3, #16
 800826a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008278:	61fa      	str	r2, [r7, #28]
 800827a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	69b9      	ldr	r1, [r7, #24]
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	617b      	str	r3, [r7, #20]
   return(result);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e3      	bne.n	8008254 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800828c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f85c 	bl	8008350 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008298:	e023      	b.n	80082e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <HAL_UART_IRQHandler+0x4ea>
 80082a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fae9 	bl	800888a <UART_Transmit_IT>
    return;
 80082b8:	e014      	b.n	80082e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <HAL_UART_IRQHandler+0x514>
 80082c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fb29 	bl	800892a <UART_EndTransmit_IT>
    return;
 80082d8:	e004      	b.n	80082e4 <HAL_UART_IRQHandler+0x514>
    return;
 80082da:	bf00      	nop
 80082dc:	e002      	b.n	80082e4 <HAL_UART_IRQHandler+0x514>
      return;
 80082de:	bf00      	nop
 80082e0:	e000      	b.n	80082e4 <HAL_UART_IRQHandler+0x514>
      return;
 80082e2:	bf00      	nop
  }
}
 80082e4:	37e8      	adds	r7, #232	; 0xe8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop

080082ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b090      	sub	sp, #64	; 0x40
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d137      	bne.n	80083f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008386:	2200      	movs	r2, #0
 8008388:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800838a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	623b      	str	r3, [r7, #32]
   return(result);
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80083a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3314      	adds	r3, #20
 80083a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083aa:	633a      	str	r2, [r7, #48]	; 0x30
 80083ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e5      	bne.n	800838a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	330c      	adds	r3, #12
 80083c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
 80083d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	330c      	adds	r3, #12
 80083dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083de:	61fa      	str	r2, [r7, #28]
 80083e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	69b9      	ldr	r1, [r7, #24]
 80083e4:	69fa      	ldr	r2, [r7, #28]
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	617b      	str	r3, [r7, #20]
   return(result);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e5      	bne.n	80083be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083f2:	e002      	b.n	80083fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80083f6:	f7ff ff79 	bl	80082ec <HAL_UART_TxCpltCallback>
}
 80083fa:	bf00      	nop
 80083fc:	3740      	adds	r7, #64	; 0x40
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff ff75 	bl	8008300 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b09c      	sub	sp, #112	; 0x70
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008436:	2b00      	cmp	r3, #0
 8008438:	d172      	bne.n	8008520 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800843a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843c:	2200      	movs	r2, #0
 800843e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008456:	66bb      	str	r3, [r7, #104]	; 0x68
 8008458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	330c      	adds	r3, #12
 800845e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008460:	65ba      	str	r2, [r7, #88]	; 0x58
 8008462:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800846e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e5      	bne.n	8008440 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	667b      	str	r3, [r7, #100]	; 0x64
 800848c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3314      	adds	r3, #20
 8008492:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008494:	647a      	str	r2, [r7, #68]	; 0x44
 8008496:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800849a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e5      	bne.n	8008474 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3314      	adds	r3, #20
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	623b      	str	r3, [r7, #32]
   return(result);
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084be:	663b      	str	r3, [r7, #96]	; 0x60
 80084c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3314      	adds	r3, #20
 80084c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084c8:	633a      	str	r2, [r7, #48]	; 0x30
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e5      	bne.n	80084a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d119      	bne.n	8008520 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	330c      	adds	r3, #12
 80084f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	e853 3f00 	ldrex	r3, [r3]
 80084fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0310 	bic.w	r3, r3, #16
 8008502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	330c      	adds	r3, #12
 800850a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800850c:	61fa      	str	r2, [r7, #28]
 800850e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	69b9      	ldr	r1, [r7, #24]
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	e841 2300 	strex	r3, r2, [r1]
 8008518:	617b      	str	r3, [r7, #20]
   return(result);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e5      	bne.n	80084ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008524:	2b01      	cmp	r3, #1
 8008526:	d106      	bne.n	8008536 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800852c:	4619      	mov	r1, r3
 800852e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008530:	f7ff ff0e 	bl	8008350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008534:	e002      	b.n	800853c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008536:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008538:	f7ff feec 	bl	8008314 <HAL_UART_RxCpltCallback>
}
 800853c:	bf00      	nop
 800853e:	3770      	adds	r7, #112	; 0x70
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	2b01      	cmp	r3, #1
 8008558:	d108      	bne.n	800856c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	b29b      	uxth	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7ff fef3 	bl	8008350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800856a:	e002      	b.n	8008572 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7ff fedb 	bl	8008328 <HAL_UART_RxHalfCpltCallback>
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	bf0c      	ite	eq
 800859a:	2301      	moveq	r3, #1
 800859c:	2300      	movne	r3, #0
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b21      	cmp	r3, #33	; 0x21
 80085ac:	d108      	bne.n	80085c0 <UART_DMAError+0x46>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80085ba:	68b8      	ldr	r0, [r7, #8]
 80085bc:	f000 f8c6 	bl	800874c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ca:	2b40      	cmp	r3, #64	; 0x40
 80085cc:	bf0c      	ite	eq
 80085ce:	2301      	moveq	r3, #1
 80085d0:	2300      	movne	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b22      	cmp	r3, #34	; 0x22
 80085e0:	d108      	bne.n	80085f4 <UART_DMAError+0x7a>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2200      	movs	r2, #0
 80085ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085ee:	68b8      	ldr	r0, [r7, #8]
 80085f0:	f000 f8d4 	bl	800879c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	f043 0210 	orr.w	r2, r3, #16
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008600:	68b8      	ldr	r0, [r7, #8]
 8008602:	f7ff fe9b 	bl	800833c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b098      	sub	sp, #96	; 0x60
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	4613      	mov	r3, r2
 800861c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2222      	movs	r2, #34	; 0x22
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863c:	4a40      	ldr	r2, [pc, #256]	; (8008740 <UART_Start_Receive_DMA+0x130>)
 800863e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	4a3f      	ldr	r2, [pc, #252]	; (8008744 <UART_Start_Receive_DMA+0x134>)
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	4a3e      	ldr	r2, [pc, #248]	; (8008748 <UART_Start_Receive_DMA+0x138>)
 800864e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	2200      	movs	r2, #0
 8008656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008658:	f107 0308 	add.w	r3, r7, #8
 800865c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3304      	adds	r3, #4
 8008668:	4619      	mov	r1, r3
 800866a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	f7fa fe90 	bl	8003394 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d019      	beq.n	80086ce <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80086bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80086c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e5      	bne.n	800869a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3314      	adds	r3, #20
 80086d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	657b      	str	r3, [r7, #84]	; 0x54
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3314      	adds	r3, #20
 80086ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e5      	bne.n	80086ce <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3314      	adds	r3, #20
 8008708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	617b      	str	r3, [r7, #20]
   return(result);
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008718:	653b      	str	r3, [r7, #80]	; 0x50
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3314      	adds	r3, #20
 8008720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008722:	627a      	str	r2, [r7, #36]	; 0x24
 8008724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6a39      	ldr	r1, [r7, #32]
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e5      	bne.n	8008702 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3760      	adds	r7, #96	; 0x60
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	0800841f 	.word	0x0800841f
 8008744:	08008545 	.word	0x08008545
 8008748:	0800857b 	.word	0x0800857b

0800874c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b089      	sub	sp, #36	; 0x24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	60bb      	str	r3, [r7, #8]
   return(result);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800876a:	61fb      	str	r3, [r7, #28]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	330c      	adds	r3, #12
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	61ba      	str	r2, [r7, #24]
 8008776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6979      	ldr	r1, [r7, #20]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	613b      	str	r3, [r7, #16]
   return(result);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e5      	bne.n	8008754 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008790:	bf00      	nop
 8008792:	3724      	adds	r7, #36	; 0x24
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b095      	sub	sp, #84	; 0x54
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087c4:	643a      	str	r2, [r7, #64]	; 0x40
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3314      	adds	r3, #20
 80087de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3314      	adds	r3, #20
 80087f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	2b01      	cmp	r3, #1
 8008812:	d119      	bne.n	8008848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	330c      	adds	r3, #12
 800881a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	60bb      	str	r3, [r7, #8]
   return(result);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f023 0310 	bic.w	r3, r3, #16
 800882a:	647b      	str	r3, [r7, #68]	; 0x44
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	330c      	adds	r3, #12
 8008832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008834:	61ba      	str	r2, [r7, #24]
 8008836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6979      	ldr	r1, [r7, #20]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	613b      	str	r3, [r7, #16]
   return(result);
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008856:	bf00      	nop
 8008858:	3754      	adds	r7, #84	; 0x54
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f7ff fd5d 	bl	800833c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008882:	bf00      	nop
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b21      	cmp	r3, #33	; 0x21
 800889c:	d13e      	bne.n	800891c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d114      	bne.n	80088d2 <UART_Transmit_IT+0x48>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d110      	bne.n	80088d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	1c9a      	adds	r2, r3, #2
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	621a      	str	r2, [r3, #32]
 80088d0:	e008      	b.n	80088e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	1c59      	adds	r1, r3, #1
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6211      	str	r1, [r2, #32]
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4619      	mov	r1, r3
 80088f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10f      	bne.n	8008918 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	e000      	b.n	800891e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800891c:	2302      	movs	r3, #2
  }
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fcce 	bl	80082ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b08c      	sub	sp, #48	; 0x30
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b22      	cmp	r3, #34	; 0x22
 800896c:	f040 80ab 	bne.w	8008ac6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008978:	d117      	bne.n	80089aa <UART_Receive_IT+0x50>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d113      	bne.n	80089aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008998:	b29a      	uxth	r2, r3
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	1c9a      	adds	r2, r3, #2
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	629a      	str	r2, [r3, #40]	; 0x28
 80089a8:	e026      	b.n	80089f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089bc:	d007      	beq.n	80089ce <UART_Receive_IT+0x74>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10a      	bne.n	80089dc <UART_Receive_IT+0x82>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	701a      	strb	r2, [r3, #0]
 80089da:	e008      	b.n	80089ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	4619      	mov	r1, r3
 8008a06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d15a      	bne.n	8008ac2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0220 	bic.w	r2, r2, #32
 8008a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	695a      	ldr	r2, [r3, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0201 	bic.w	r2, r2, #1
 8008a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d135      	bne.n	8008ab8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	330c      	adds	r3, #12
 8008a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	613b      	str	r3, [r7, #16]
   return(result);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f023 0310 	bic.w	r3, r3, #16
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a72:	623a      	str	r2, [r7, #32]
 8008a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	69f9      	ldr	r1, [r7, #28]
 8008a78:	6a3a      	ldr	r2, [r7, #32]
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e5      	bne.n	8008a52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0310 	and.w	r3, r3, #16
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d10a      	bne.n	8008aaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a94:	2300      	movs	r3, #0
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fc4d 	bl	8008350 <HAL_UARTEx_RxEventCallback>
 8008ab6:	e002      	b.n	8008abe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff fc2b 	bl	8008314 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e002      	b.n	8008ac8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e000      	b.n	8008ac8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ac6:	2302      	movs	r3, #2
  }
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3730      	adds	r7, #48	; 0x30
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad4:	b0c0      	sub	sp, #256	; 0x100
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	68d9      	ldr	r1, [r3, #12]
 8008aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	ea40 0301 	orr.w	r3, r0, r1
 8008af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afe:	689a      	ldr	r2, [r3, #8]
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b28:	f021 010c 	bic.w	r1, r1, #12
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b36:	430b      	orrs	r3, r1
 8008b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4a:	6999      	ldr	r1, [r3, #24]
 8008b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	ea40 0301 	orr.w	r3, r0, r1
 8008b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	4b8f      	ldr	r3, [pc, #572]	; (8008d9c <UART_SetConfig+0x2cc>)
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d005      	beq.n	8008b70 <UART_SetConfig+0xa0>
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	4b8d      	ldr	r3, [pc, #564]	; (8008da0 <UART_SetConfig+0x2d0>)
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d104      	bne.n	8008b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b70:	f7fe f9ee 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 8008b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b78:	e003      	b.n	8008b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b7a:	f7fe f9d5 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 8008b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8c:	f040 810c 	bne.w	8008da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	1891      	adds	r1, r2, r2
 8008ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008baa:	415b      	adcs	r3, r3
 8008bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	eb12 0801 	adds.w	r8, r2, r1
 8008bb8:	4629      	mov	r1, r5
 8008bba:	eb43 0901 	adc.w	r9, r3, r1
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bd2:	4690      	mov	r8, r2
 8008bd4:	4699      	mov	r9, r3
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	eb18 0303 	adds.w	r3, r8, r3
 8008bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008be0:	462b      	mov	r3, r5
 8008be2:	eb49 0303 	adc.w	r3, r9, r3
 8008be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bfe:	460b      	mov	r3, r1
 8008c00:	18db      	adds	r3, r3, r3
 8008c02:	653b      	str	r3, [r7, #80]	; 0x50
 8008c04:	4613      	mov	r3, r2
 8008c06:	eb42 0303 	adc.w	r3, r2, r3
 8008c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c14:	f7f7 fff0 	bl	8000bf8 <__aeabi_uldivmod>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4b61      	ldr	r3, [pc, #388]	; (8008da4 <UART_SetConfig+0x2d4>)
 8008c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	011c      	lsls	r4, r3, #4
 8008c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c38:	4642      	mov	r2, r8
 8008c3a:	464b      	mov	r3, r9
 8008c3c:	1891      	adds	r1, r2, r2
 8008c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c40:	415b      	adcs	r3, r3
 8008c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c48:	4641      	mov	r1, r8
 8008c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c4e:	4649      	mov	r1, r9
 8008c50:	eb43 0b01 	adc.w	fp, r3, r1
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	f04f 0300 	mov.w	r3, #0
 8008c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c68:	4692      	mov	sl, r2
 8008c6a:	469b      	mov	fp, r3
 8008c6c:	4643      	mov	r3, r8
 8008c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8008c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c76:	464b      	mov	r3, r9
 8008c78:	eb4b 0303 	adc.w	r3, fp, r3
 8008c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c94:	460b      	mov	r3, r1
 8008c96:	18db      	adds	r3, r3, r3
 8008c98:	643b      	str	r3, [r7, #64]	; 0x40
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8008ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008caa:	f7f7 ffa5 	bl	8000bf8 <__aeabi_uldivmod>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	4b3b      	ldr	r3, [pc, #236]	; (8008da4 <UART_SetConfig+0x2d4>)
 8008cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8008cba:	095b      	lsrs	r3, r3, #5
 8008cbc:	2264      	movs	r2, #100	; 0x64
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	1acb      	subs	r3, r1, r3
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008cca:	4b36      	ldr	r3, [pc, #216]	; (8008da4 <UART_SetConfig+0x2d4>)
 8008ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cd8:	441c      	add	r4, r3
 8008cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008cec:	4642      	mov	r2, r8
 8008cee:	464b      	mov	r3, r9
 8008cf0:	1891      	adds	r1, r2, r2
 8008cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cf4:	415b      	adcs	r3, r3
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cfc:	4641      	mov	r1, r8
 8008cfe:	1851      	adds	r1, r2, r1
 8008d00:	6339      	str	r1, [r7, #48]	; 0x30
 8008d02:	4649      	mov	r1, r9
 8008d04:	414b      	adcs	r3, r1
 8008d06:	637b      	str	r3, [r7, #52]	; 0x34
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d14:	4659      	mov	r1, fp
 8008d16:	00cb      	lsls	r3, r1, #3
 8008d18:	4651      	mov	r1, sl
 8008d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d1e:	4651      	mov	r1, sl
 8008d20:	00ca      	lsls	r2, r1, #3
 8008d22:	4610      	mov	r0, r2
 8008d24:	4619      	mov	r1, r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	4642      	mov	r2, r8
 8008d2a:	189b      	adds	r3, r3, r2
 8008d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d30:	464b      	mov	r3, r9
 8008d32:	460a      	mov	r2, r1
 8008d34:	eb42 0303 	adc.w	r3, r2, r3
 8008d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d50:	460b      	mov	r3, r1
 8008d52:	18db      	adds	r3, r3, r3
 8008d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d56:	4613      	mov	r3, r2
 8008d58:	eb42 0303 	adc.w	r3, r2, r3
 8008d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d66:	f7f7 ff47 	bl	8000bf8 <__aeabi_uldivmod>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <UART_SetConfig+0x2d4>)
 8008d70:	fba3 1302 	umull	r1, r3, r3, r2
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	2164      	movs	r1, #100	; 0x64
 8008d78:	fb01 f303 	mul.w	r3, r1, r3
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	3332      	adds	r3, #50	; 0x32
 8008d82:	4a08      	ldr	r2, [pc, #32]	; (8008da4 <UART_SetConfig+0x2d4>)
 8008d84:	fba2 2303 	umull	r2, r3, r2, r3
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	f003 0207 	and.w	r2, r3, #7
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4422      	add	r2, r4
 8008d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d98:	e105      	b.n	8008fa6 <UART_SetConfig+0x4d6>
 8008d9a:	bf00      	nop
 8008d9c:	40011000 	.word	0x40011000
 8008da0:	40011400 	.word	0x40011400
 8008da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008dba:	4642      	mov	r2, r8
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	1891      	adds	r1, r2, r2
 8008dc0:	6239      	str	r1, [r7, #32]
 8008dc2:	415b      	adcs	r3, r3
 8008dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dca:	4641      	mov	r1, r8
 8008dcc:	1854      	adds	r4, r2, r1
 8008dce:	4649      	mov	r1, r9
 8008dd0:	eb43 0501 	adc.w	r5, r3, r1
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	00eb      	lsls	r3, r5, #3
 8008dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008de2:	00e2      	lsls	r2, r4, #3
 8008de4:	4614      	mov	r4, r2
 8008de6:	461d      	mov	r5, r3
 8008de8:	4643      	mov	r3, r8
 8008dea:	18e3      	adds	r3, r4, r3
 8008dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008df0:	464b      	mov	r3, r9
 8008df2:	eb45 0303 	adc.w	r3, r5, r3
 8008df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e16:	4629      	mov	r1, r5
 8008e18:	008b      	lsls	r3, r1, #2
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e20:	4621      	mov	r1, r4
 8008e22:	008a      	lsls	r2, r1, #2
 8008e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e28:	f7f7 fee6 	bl	8000bf8 <__aeabi_uldivmod>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4b60      	ldr	r3, [pc, #384]	; (8008fb4 <UART_SetConfig+0x4e4>)
 8008e32:	fba3 2302 	umull	r2, r3, r3, r2
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	011c      	lsls	r4, r3, #4
 8008e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	1891      	adds	r1, r2, r2
 8008e52:	61b9      	str	r1, [r7, #24]
 8008e54:	415b      	adcs	r3, r3
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e5c:	4641      	mov	r1, r8
 8008e5e:	1851      	adds	r1, r2, r1
 8008e60:	6139      	str	r1, [r7, #16]
 8008e62:	4649      	mov	r1, r9
 8008e64:	414b      	adcs	r3, r1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	f04f 0200 	mov.w	r2, #0
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e74:	4659      	mov	r1, fp
 8008e76:	00cb      	lsls	r3, r1, #3
 8008e78:	4651      	mov	r1, sl
 8008e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e7e:	4651      	mov	r1, sl
 8008e80:	00ca      	lsls	r2, r1, #3
 8008e82:	4610      	mov	r0, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	4642      	mov	r2, r8
 8008e8a:	189b      	adds	r3, r3, r2
 8008e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e90:	464b      	mov	r3, r9
 8008e92:	460a      	mov	r2, r1
 8008e94:	eb42 0303 	adc.w	r3, r2, r3
 8008e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ea8:	f04f 0200 	mov.w	r2, #0
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	008b      	lsls	r3, r1, #2
 8008eb8:	4641      	mov	r1, r8
 8008eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	008a      	lsls	r2, r1, #2
 8008ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ec6:	f7f7 fe97 	bl	8000bf8 <__aeabi_uldivmod>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4b39      	ldr	r3, [pc, #228]	; (8008fb4 <UART_SetConfig+0x4e4>)
 8008ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	2164      	movs	r1, #100	; 0x64
 8008ed8:	fb01 f303 	mul.w	r3, r1, r3
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	011b      	lsls	r3, r3, #4
 8008ee0:	3332      	adds	r3, #50	; 0x32
 8008ee2:	4a34      	ldr	r2, [pc, #208]	; (8008fb4 <UART_SetConfig+0x4e4>)
 8008ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eee:	441c      	add	r4, r3
 8008ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8008efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008efe:	4642      	mov	r2, r8
 8008f00:	464b      	mov	r3, r9
 8008f02:	1891      	adds	r1, r2, r2
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	415b      	adcs	r3, r3
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f0e:	4641      	mov	r1, r8
 8008f10:	1851      	adds	r1, r2, r1
 8008f12:	6039      	str	r1, [r7, #0]
 8008f14:	4649      	mov	r1, r9
 8008f16:	414b      	adcs	r3, r1
 8008f18:	607b      	str	r3, [r7, #4]
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	f04f 0300 	mov.w	r3, #0
 8008f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f26:	4659      	mov	r1, fp
 8008f28:	00cb      	lsls	r3, r1, #3
 8008f2a:	4651      	mov	r1, sl
 8008f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f30:	4651      	mov	r1, sl
 8008f32:	00ca      	lsls	r2, r1, #3
 8008f34:	4610      	mov	r0, r2
 8008f36:	4619      	mov	r1, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4642      	mov	r2, r8
 8008f3c:	189b      	adds	r3, r3, r2
 8008f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f40:	464b      	mov	r3, r9
 8008f42:	460a      	mov	r2, r1
 8008f44:	eb42 0303 	adc.w	r3, r2, r3
 8008f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	663b      	str	r3, [r7, #96]	; 0x60
 8008f54:	667a      	str	r2, [r7, #100]	; 0x64
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f62:	4649      	mov	r1, r9
 8008f64:	008b      	lsls	r3, r1, #2
 8008f66:	4641      	mov	r1, r8
 8008f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	008a      	lsls	r2, r1, #2
 8008f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f74:	f7f7 fe40 	bl	8000bf8 <__aeabi_uldivmod>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4b0d      	ldr	r3, [pc, #52]	; (8008fb4 <UART_SetConfig+0x4e4>)
 8008f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	2164      	movs	r1, #100	; 0x64
 8008f86:	fb01 f303 	mul.w	r3, r1, r3
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	3332      	adds	r3, #50	; 0x32
 8008f90:	4a08      	ldr	r2, [pc, #32]	; (8008fb4 <UART_SetConfig+0x4e4>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4422      	add	r2, r4
 8008fa4:	609a      	str	r2, [r3, #8]
}
 8008fa6:	bf00      	nop
 8008fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008fac:	46bd      	mov	sp, r7
 8008fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fb2:	bf00      	nop
 8008fb4:	51eb851f 	.word	0x51eb851f

08008fb8 <__errno>:
 8008fb8:	4b01      	ldr	r3, [pc, #4]	; (8008fc0 <__errno+0x8>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20000030 	.word	0x20000030

08008fc4 <__libc_init_array>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4d0d      	ldr	r5, [pc, #52]	; (8008ffc <__libc_init_array+0x38>)
 8008fc8:	4c0d      	ldr	r4, [pc, #52]	; (8009000 <__libc_init_array+0x3c>)
 8008fca:	1b64      	subs	r4, r4, r5
 8008fcc:	10a4      	asrs	r4, r4, #2
 8008fce:	2600      	movs	r6, #0
 8008fd0:	42a6      	cmp	r6, r4
 8008fd2:	d109      	bne.n	8008fe8 <__libc_init_array+0x24>
 8008fd4:	4d0b      	ldr	r5, [pc, #44]	; (8009004 <__libc_init_array+0x40>)
 8008fd6:	4c0c      	ldr	r4, [pc, #48]	; (8009008 <__libc_init_array+0x44>)
 8008fd8:	f000 ff2e 	bl	8009e38 <_init>
 8008fdc:	1b64      	subs	r4, r4, r5
 8008fde:	10a4      	asrs	r4, r4, #2
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	d105      	bne.n	8008ff2 <__libc_init_array+0x2e>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fec:	4798      	blx	r3
 8008fee:	3601      	adds	r6, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__libc_init_array+0xc>
 8008ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff6:	4798      	blx	r3
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	e7f2      	b.n	8008fe2 <__libc_init_array+0x1e>
 8008ffc:	08009f20 	.word	0x08009f20
 8009000:	08009f20 	.word	0x08009f20
 8009004:	08009f20 	.word	0x08009f20
 8009008:	08009f24 	.word	0x08009f24

0800900c <memset>:
 800900c:	4402      	add	r2, r0
 800900e:	4603      	mov	r3, r0
 8009010:	4293      	cmp	r3, r2
 8009012:	d100      	bne.n	8009016 <memset+0xa>
 8009014:	4770      	bx	lr
 8009016:	f803 1b01 	strb.w	r1, [r3], #1
 800901a:	e7f9      	b.n	8009010 <memset+0x4>

0800901c <siprintf>:
 800901c:	b40e      	push	{r1, r2, r3}
 800901e:	b500      	push	{lr}
 8009020:	b09c      	sub	sp, #112	; 0x70
 8009022:	ab1d      	add	r3, sp, #116	; 0x74
 8009024:	9002      	str	r0, [sp, #8]
 8009026:	9006      	str	r0, [sp, #24]
 8009028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800902c:	4809      	ldr	r0, [pc, #36]	; (8009054 <siprintf+0x38>)
 800902e:	9107      	str	r1, [sp, #28]
 8009030:	9104      	str	r1, [sp, #16]
 8009032:	4909      	ldr	r1, [pc, #36]	; (8009058 <siprintf+0x3c>)
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	a902      	add	r1, sp, #8
 8009040:	f000 f87e 	bl	8009140 <_svfiprintf_r>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	b01c      	add	sp, #112	; 0x70
 800904c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009050:	b003      	add	sp, #12
 8009052:	4770      	bx	lr
 8009054:	20000030 	.word	0x20000030
 8009058:	ffff0208 	.word	0xffff0208

0800905c <strstr>:
 800905c:	780a      	ldrb	r2, [r1, #0]
 800905e:	b570      	push	{r4, r5, r6, lr}
 8009060:	b96a      	cbnz	r2, 800907e <strstr+0x22>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	429a      	cmp	r2, r3
 8009066:	d109      	bne.n	800907c <strstr+0x20>
 8009068:	460c      	mov	r4, r1
 800906a:	4605      	mov	r5, r0
 800906c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0f6      	beq.n	8009062 <strstr+0x6>
 8009074:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009078:	429e      	cmp	r6, r3
 800907a:	d0f7      	beq.n	800906c <strstr+0x10>
 800907c:	3001      	adds	r0, #1
 800907e:	7803      	ldrb	r3, [r0, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ef      	bne.n	8009064 <strstr+0x8>
 8009084:	4618      	mov	r0, r3
 8009086:	e7ec      	b.n	8009062 <strstr+0x6>

08009088 <__ssputs_r>:
 8009088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800908c:	688e      	ldr	r6, [r1, #8]
 800908e:	429e      	cmp	r6, r3
 8009090:	4682      	mov	sl, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4690      	mov	r8, r2
 8009096:	461f      	mov	r7, r3
 8009098:	d838      	bhi.n	800910c <__ssputs_r+0x84>
 800909a:	898a      	ldrh	r2, [r1, #12]
 800909c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090a0:	d032      	beq.n	8009108 <__ssputs_r+0x80>
 80090a2:	6825      	ldr	r5, [r4, #0]
 80090a4:	6909      	ldr	r1, [r1, #16]
 80090a6:	eba5 0901 	sub.w	r9, r5, r1
 80090aa:	6965      	ldr	r5, [r4, #20]
 80090ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090b4:	3301      	adds	r3, #1
 80090b6:	444b      	add	r3, r9
 80090b8:	106d      	asrs	r5, r5, #1
 80090ba:	429d      	cmp	r5, r3
 80090bc:	bf38      	it	cc
 80090be:	461d      	movcc	r5, r3
 80090c0:	0553      	lsls	r3, r2, #21
 80090c2:	d531      	bpl.n	8009128 <__ssputs_r+0xa0>
 80090c4:	4629      	mov	r1, r5
 80090c6:	f000 fb63 	bl	8009790 <_malloc_r>
 80090ca:	4606      	mov	r6, r0
 80090cc:	b950      	cbnz	r0, 80090e4 <__ssputs_r+0x5c>
 80090ce:	230c      	movs	r3, #12
 80090d0:	f8ca 3000 	str.w	r3, [sl]
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	6921      	ldr	r1, [r4, #16]
 80090e6:	464a      	mov	r2, r9
 80090e8:	f000 fabe 	bl	8009668 <memcpy>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f6:	81a3      	strh	r3, [r4, #12]
 80090f8:	6126      	str	r6, [r4, #16]
 80090fa:	6165      	str	r5, [r4, #20]
 80090fc:	444e      	add	r6, r9
 80090fe:	eba5 0509 	sub.w	r5, r5, r9
 8009102:	6026      	str	r6, [r4, #0]
 8009104:	60a5      	str	r5, [r4, #8]
 8009106:	463e      	mov	r6, r7
 8009108:	42be      	cmp	r6, r7
 800910a:	d900      	bls.n	800910e <__ssputs_r+0x86>
 800910c:	463e      	mov	r6, r7
 800910e:	6820      	ldr	r0, [r4, #0]
 8009110:	4632      	mov	r2, r6
 8009112:	4641      	mov	r1, r8
 8009114:	f000 fab6 	bl	8009684 <memmove>
 8009118:	68a3      	ldr	r3, [r4, #8]
 800911a:	1b9b      	subs	r3, r3, r6
 800911c:	60a3      	str	r3, [r4, #8]
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	4433      	add	r3, r6
 8009122:	6023      	str	r3, [r4, #0]
 8009124:	2000      	movs	r0, #0
 8009126:	e7db      	b.n	80090e0 <__ssputs_r+0x58>
 8009128:	462a      	mov	r2, r5
 800912a:	f000 fba5 	bl	8009878 <_realloc_r>
 800912e:	4606      	mov	r6, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	d1e1      	bne.n	80090f8 <__ssputs_r+0x70>
 8009134:	6921      	ldr	r1, [r4, #16]
 8009136:	4650      	mov	r0, sl
 8009138:	f000 fabe 	bl	80096b8 <_free_r>
 800913c:	e7c7      	b.n	80090ce <__ssputs_r+0x46>
	...

08009140 <_svfiprintf_r>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	4698      	mov	r8, r3
 8009146:	898b      	ldrh	r3, [r1, #12]
 8009148:	061b      	lsls	r3, r3, #24
 800914a:	b09d      	sub	sp, #116	; 0x74
 800914c:	4607      	mov	r7, r0
 800914e:	460d      	mov	r5, r1
 8009150:	4614      	mov	r4, r2
 8009152:	d50e      	bpl.n	8009172 <_svfiprintf_r+0x32>
 8009154:	690b      	ldr	r3, [r1, #16]
 8009156:	b963      	cbnz	r3, 8009172 <_svfiprintf_r+0x32>
 8009158:	2140      	movs	r1, #64	; 0x40
 800915a:	f000 fb19 	bl	8009790 <_malloc_r>
 800915e:	6028      	str	r0, [r5, #0]
 8009160:	6128      	str	r0, [r5, #16]
 8009162:	b920      	cbnz	r0, 800916e <_svfiprintf_r+0x2e>
 8009164:	230c      	movs	r3, #12
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	e0d1      	b.n	8009312 <_svfiprintf_r+0x1d2>
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	616b      	str	r3, [r5, #20]
 8009172:	2300      	movs	r3, #0
 8009174:	9309      	str	r3, [sp, #36]	; 0x24
 8009176:	2320      	movs	r3, #32
 8009178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800917c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009180:	2330      	movs	r3, #48	; 0x30
 8009182:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800932c <_svfiprintf_r+0x1ec>
 8009186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800918a:	f04f 0901 	mov.w	r9, #1
 800918e:	4623      	mov	r3, r4
 8009190:	469a      	mov	sl, r3
 8009192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009196:	b10a      	cbz	r2, 800919c <_svfiprintf_r+0x5c>
 8009198:	2a25      	cmp	r2, #37	; 0x25
 800919a:	d1f9      	bne.n	8009190 <_svfiprintf_r+0x50>
 800919c:	ebba 0b04 	subs.w	fp, sl, r4
 80091a0:	d00b      	beq.n	80091ba <_svfiprintf_r+0x7a>
 80091a2:	465b      	mov	r3, fp
 80091a4:	4622      	mov	r2, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7ff ff6d 	bl	8009088 <__ssputs_r>
 80091ae:	3001      	adds	r0, #1
 80091b0:	f000 80aa 	beq.w	8009308 <_svfiprintf_r+0x1c8>
 80091b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091b6:	445a      	add	r2, fp
 80091b8:	9209      	str	r2, [sp, #36]	; 0x24
 80091ba:	f89a 3000 	ldrb.w	r3, [sl]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 80a2 	beq.w	8009308 <_svfiprintf_r+0x1c8>
 80091c4:	2300      	movs	r3, #0
 80091c6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ce:	f10a 0a01 	add.w	sl, sl, #1
 80091d2:	9304      	str	r3, [sp, #16]
 80091d4:	9307      	str	r3, [sp, #28]
 80091d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091da:	931a      	str	r3, [sp, #104]	; 0x68
 80091dc:	4654      	mov	r4, sl
 80091de:	2205      	movs	r2, #5
 80091e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e4:	4851      	ldr	r0, [pc, #324]	; (800932c <_svfiprintf_r+0x1ec>)
 80091e6:	f7f6 fffb 	bl	80001e0 <memchr>
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	b9d8      	cbnz	r0, 8009226 <_svfiprintf_r+0xe6>
 80091ee:	06d0      	lsls	r0, r2, #27
 80091f0:	bf44      	itt	mi
 80091f2:	2320      	movmi	r3, #32
 80091f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091f8:	0711      	lsls	r1, r2, #28
 80091fa:	bf44      	itt	mi
 80091fc:	232b      	movmi	r3, #43	; 0x2b
 80091fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b2a      	cmp	r3, #42	; 0x2a
 8009208:	d015      	beq.n	8009236 <_svfiprintf_r+0xf6>
 800920a:	9a07      	ldr	r2, [sp, #28]
 800920c:	4654      	mov	r4, sl
 800920e:	2000      	movs	r0, #0
 8009210:	f04f 0c0a 	mov.w	ip, #10
 8009214:	4621      	mov	r1, r4
 8009216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800921a:	3b30      	subs	r3, #48	; 0x30
 800921c:	2b09      	cmp	r3, #9
 800921e:	d94e      	bls.n	80092be <_svfiprintf_r+0x17e>
 8009220:	b1b0      	cbz	r0, 8009250 <_svfiprintf_r+0x110>
 8009222:	9207      	str	r2, [sp, #28]
 8009224:	e014      	b.n	8009250 <_svfiprintf_r+0x110>
 8009226:	eba0 0308 	sub.w	r3, r0, r8
 800922a:	fa09 f303 	lsl.w	r3, r9, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	46a2      	mov	sl, r4
 8009234:	e7d2      	b.n	80091dc <_svfiprintf_r+0x9c>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	1d19      	adds	r1, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	9103      	str	r1, [sp, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfbb      	ittet	lt
 8009242:	425b      	neglt	r3, r3
 8009244:	f042 0202 	orrlt.w	r2, r2, #2
 8009248:	9307      	strge	r3, [sp, #28]
 800924a:	9307      	strlt	r3, [sp, #28]
 800924c:	bfb8      	it	lt
 800924e:	9204      	strlt	r2, [sp, #16]
 8009250:	7823      	ldrb	r3, [r4, #0]
 8009252:	2b2e      	cmp	r3, #46	; 0x2e
 8009254:	d10c      	bne.n	8009270 <_svfiprintf_r+0x130>
 8009256:	7863      	ldrb	r3, [r4, #1]
 8009258:	2b2a      	cmp	r3, #42	; 0x2a
 800925a:	d135      	bne.n	80092c8 <_svfiprintf_r+0x188>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d1a      	adds	r2, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9203      	str	r2, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfb8      	it	lt
 8009268:	f04f 33ff 	movlt.w	r3, #4294967295
 800926c:	3402      	adds	r4, #2
 800926e:	9305      	str	r3, [sp, #20]
 8009270:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800933c <_svfiprintf_r+0x1fc>
 8009274:	7821      	ldrb	r1, [r4, #0]
 8009276:	2203      	movs	r2, #3
 8009278:	4650      	mov	r0, sl
 800927a:	f7f6 ffb1 	bl	80001e0 <memchr>
 800927e:	b140      	cbz	r0, 8009292 <_svfiprintf_r+0x152>
 8009280:	2340      	movs	r3, #64	; 0x40
 8009282:	eba0 000a 	sub.w	r0, r0, sl
 8009286:	fa03 f000 	lsl.w	r0, r3, r0
 800928a:	9b04      	ldr	r3, [sp, #16]
 800928c:	4303      	orrs	r3, r0
 800928e:	3401      	adds	r4, #1
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009296:	4826      	ldr	r0, [pc, #152]	; (8009330 <_svfiprintf_r+0x1f0>)
 8009298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800929c:	2206      	movs	r2, #6
 800929e:	f7f6 ff9f 	bl	80001e0 <memchr>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d038      	beq.n	8009318 <_svfiprintf_r+0x1d8>
 80092a6:	4b23      	ldr	r3, [pc, #140]	; (8009334 <_svfiprintf_r+0x1f4>)
 80092a8:	bb1b      	cbnz	r3, 80092f2 <_svfiprintf_r+0x1b2>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	3307      	adds	r3, #7
 80092ae:	f023 0307 	bic.w	r3, r3, #7
 80092b2:	3308      	adds	r3, #8
 80092b4:	9303      	str	r3, [sp, #12]
 80092b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b8:	4433      	add	r3, r6
 80092ba:	9309      	str	r3, [sp, #36]	; 0x24
 80092bc:	e767      	b.n	800918e <_svfiprintf_r+0x4e>
 80092be:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c2:	460c      	mov	r4, r1
 80092c4:	2001      	movs	r0, #1
 80092c6:	e7a5      	b.n	8009214 <_svfiprintf_r+0xd4>
 80092c8:	2300      	movs	r3, #0
 80092ca:	3401      	adds	r4, #1
 80092cc:	9305      	str	r3, [sp, #20]
 80092ce:	4619      	mov	r1, r3
 80092d0:	f04f 0c0a 	mov.w	ip, #10
 80092d4:	4620      	mov	r0, r4
 80092d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092da:	3a30      	subs	r2, #48	; 0x30
 80092dc:	2a09      	cmp	r2, #9
 80092de:	d903      	bls.n	80092e8 <_svfiprintf_r+0x1a8>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0c5      	beq.n	8009270 <_svfiprintf_r+0x130>
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	e7c3      	b.n	8009270 <_svfiprintf_r+0x130>
 80092e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ec:	4604      	mov	r4, r0
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7f0      	b.n	80092d4 <_svfiprintf_r+0x194>
 80092f2:	ab03      	add	r3, sp, #12
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	462a      	mov	r2, r5
 80092f8:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <_svfiprintf_r+0x1f8>)
 80092fa:	a904      	add	r1, sp, #16
 80092fc:	4638      	mov	r0, r7
 80092fe:	f3af 8000 	nop.w
 8009302:	1c42      	adds	r2, r0, #1
 8009304:	4606      	mov	r6, r0
 8009306:	d1d6      	bne.n	80092b6 <_svfiprintf_r+0x176>
 8009308:	89ab      	ldrh	r3, [r5, #12]
 800930a:	065b      	lsls	r3, r3, #25
 800930c:	f53f af2c 	bmi.w	8009168 <_svfiprintf_r+0x28>
 8009310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009312:	b01d      	add	sp, #116	; 0x74
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009318:	ab03      	add	r3, sp, #12
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	462a      	mov	r2, r5
 800931e:	4b06      	ldr	r3, [pc, #24]	; (8009338 <_svfiprintf_r+0x1f8>)
 8009320:	a904      	add	r1, sp, #16
 8009322:	4638      	mov	r0, r7
 8009324:	f000 f87a 	bl	800941c <_printf_i>
 8009328:	e7eb      	b.n	8009302 <_svfiprintf_r+0x1c2>
 800932a:	bf00      	nop
 800932c:	08009ea4 	.word	0x08009ea4
 8009330:	08009eae 	.word	0x08009eae
 8009334:	00000000 	.word	0x00000000
 8009338:	08009089 	.word	0x08009089
 800933c:	08009eaa 	.word	0x08009eaa

08009340 <_printf_common>:
 8009340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	4616      	mov	r6, r2
 8009346:	4699      	mov	r9, r3
 8009348:	688a      	ldr	r2, [r1, #8]
 800934a:	690b      	ldr	r3, [r1, #16]
 800934c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009350:	4293      	cmp	r3, r2
 8009352:	bfb8      	it	lt
 8009354:	4613      	movlt	r3, r2
 8009356:	6033      	str	r3, [r6, #0]
 8009358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800935c:	4607      	mov	r7, r0
 800935e:	460c      	mov	r4, r1
 8009360:	b10a      	cbz	r2, 8009366 <_printf_common+0x26>
 8009362:	3301      	adds	r3, #1
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	0699      	lsls	r1, r3, #26
 800936a:	bf42      	ittt	mi
 800936c:	6833      	ldrmi	r3, [r6, #0]
 800936e:	3302      	addmi	r3, #2
 8009370:	6033      	strmi	r3, [r6, #0]
 8009372:	6825      	ldr	r5, [r4, #0]
 8009374:	f015 0506 	ands.w	r5, r5, #6
 8009378:	d106      	bne.n	8009388 <_printf_common+0x48>
 800937a:	f104 0a19 	add.w	sl, r4, #25
 800937e:	68e3      	ldr	r3, [r4, #12]
 8009380:	6832      	ldr	r2, [r6, #0]
 8009382:	1a9b      	subs	r3, r3, r2
 8009384:	42ab      	cmp	r3, r5
 8009386:	dc26      	bgt.n	80093d6 <_printf_common+0x96>
 8009388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800938c:	1e13      	subs	r3, r2, #0
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	bf18      	it	ne
 8009392:	2301      	movne	r3, #1
 8009394:	0692      	lsls	r2, r2, #26
 8009396:	d42b      	bmi.n	80093f0 <_printf_common+0xb0>
 8009398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800939c:	4649      	mov	r1, r9
 800939e:	4638      	mov	r0, r7
 80093a0:	47c0      	blx	r8
 80093a2:	3001      	adds	r0, #1
 80093a4:	d01e      	beq.n	80093e4 <_printf_common+0xa4>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	68e5      	ldr	r5, [r4, #12]
 80093aa:	6832      	ldr	r2, [r6, #0]
 80093ac:	f003 0306 	and.w	r3, r3, #6
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	bf08      	it	eq
 80093b4:	1aad      	subeq	r5, r5, r2
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	bf0c      	ite	eq
 80093bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c0:	2500      	movne	r5, #0
 80093c2:	4293      	cmp	r3, r2
 80093c4:	bfc4      	itt	gt
 80093c6:	1a9b      	subgt	r3, r3, r2
 80093c8:	18ed      	addgt	r5, r5, r3
 80093ca:	2600      	movs	r6, #0
 80093cc:	341a      	adds	r4, #26
 80093ce:	42b5      	cmp	r5, r6
 80093d0:	d11a      	bne.n	8009408 <_printf_common+0xc8>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e008      	b.n	80093e8 <_printf_common+0xa8>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4652      	mov	r2, sl
 80093da:	4649      	mov	r1, r9
 80093dc:	4638      	mov	r0, r7
 80093de:	47c0      	blx	r8
 80093e0:	3001      	adds	r0, #1
 80093e2:	d103      	bne.n	80093ec <_printf_common+0xac>
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ec:	3501      	adds	r5, #1
 80093ee:	e7c6      	b.n	800937e <_printf_common+0x3e>
 80093f0:	18e1      	adds	r1, r4, r3
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	2030      	movs	r0, #48	; 0x30
 80093f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093fa:	4422      	add	r2, r4
 80093fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009404:	3302      	adds	r3, #2
 8009406:	e7c7      	b.n	8009398 <_printf_common+0x58>
 8009408:	2301      	movs	r3, #1
 800940a:	4622      	mov	r2, r4
 800940c:	4649      	mov	r1, r9
 800940e:	4638      	mov	r0, r7
 8009410:	47c0      	blx	r8
 8009412:	3001      	adds	r0, #1
 8009414:	d0e6      	beq.n	80093e4 <_printf_common+0xa4>
 8009416:	3601      	adds	r6, #1
 8009418:	e7d9      	b.n	80093ce <_printf_common+0x8e>
	...

0800941c <_printf_i>:
 800941c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	7e0f      	ldrb	r7, [r1, #24]
 8009422:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009424:	2f78      	cmp	r7, #120	; 0x78
 8009426:	4691      	mov	r9, r2
 8009428:	4680      	mov	r8, r0
 800942a:	460c      	mov	r4, r1
 800942c:	469a      	mov	sl, r3
 800942e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009432:	d807      	bhi.n	8009444 <_printf_i+0x28>
 8009434:	2f62      	cmp	r7, #98	; 0x62
 8009436:	d80a      	bhi.n	800944e <_printf_i+0x32>
 8009438:	2f00      	cmp	r7, #0
 800943a:	f000 80d8 	beq.w	80095ee <_printf_i+0x1d2>
 800943e:	2f58      	cmp	r7, #88	; 0x58
 8009440:	f000 80a3 	beq.w	800958a <_printf_i+0x16e>
 8009444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800944c:	e03a      	b.n	80094c4 <_printf_i+0xa8>
 800944e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009452:	2b15      	cmp	r3, #21
 8009454:	d8f6      	bhi.n	8009444 <_printf_i+0x28>
 8009456:	a101      	add	r1, pc, #4	; (adr r1, 800945c <_printf_i+0x40>)
 8009458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800945c:	080094b5 	.word	0x080094b5
 8009460:	080094c9 	.word	0x080094c9
 8009464:	08009445 	.word	0x08009445
 8009468:	08009445 	.word	0x08009445
 800946c:	08009445 	.word	0x08009445
 8009470:	08009445 	.word	0x08009445
 8009474:	080094c9 	.word	0x080094c9
 8009478:	08009445 	.word	0x08009445
 800947c:	08009445 	.word	0x08009445
 8009480:	08009445 	.word	0x08009445
 8009484:	08009445 	.word	0x08009445
 8009488:	080095d5 	.word	0x080095d5
 800948c:	080094f9 	.word	0x080094f9
 8009490:	080095b7 	.word	0x080095b7
 8009494:	08009445 	.word	0x08009445
 8009498:	08009445 	.word	0x08009445
 800949c:	080095f7 	.word	0x080095f7
 80094a0:	08009445 	.word	0x08009445
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	08009445 	.word	0x08009445
 80094ac:	08009445 	.word	0x08009445
 80094b0:	080095bf 	.word	0x080095bf
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	602a      	str	r2, [r5, #0]
 80094bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0a3      	b.n	8009610 <_printf_i+0x1f4>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	6829      	ldr	r1, [r5, #0]
 80094cc:	0606      	lsls	r6, r0, #24
 80094ce:	f101 0304 	add.w	r3, r1, #4
 80094d2:	d50a      	bpl.n	80094ea <_printf_i+0xce>
 80094d4:	680e      	ldr	r6, [r1, #0]
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	2e00      	cmp	r6, #0
 80094da:	da03      	bge.n	80094e4 <_printf_i+0xc8>
 80094dc:	232d      	movs	r3, #45	; 0x2d
 80094de:	4276      	negs	r6, r6
 80094e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e4:	485e      	ldr	r0, [pc, #376]	; (8009660 <_printf_i+0x244>)
 80094e6:	230a      	movs	r3, #10
 80094e8:	e019      	b.n	800951e <_printf_i+0x102>
 80094ea:	680e      	ldr	r6, [r1, #0]
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094f2:	bf18      	it	ne
 80094f4:	b236      	sxthne	r6, r6
 80094f6:	e7ef      	b.n	80094d8 <_printf_i+0xbc>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	6820      	ldr	r0, [r4, #0]
 80094fc:	1d19      	adds	r1, r3, #4
 80094fe:	6029      	str	r1, [r5, #0]
 8009500:	0601      	lsls	r1, r0, #24
 8009502:	d501      	bpl.n	8009508 <_printf_i+0xec>
 8009504:	681e      	ldr	r6, [r3, #0]
 8009506:	e002      	b.n	800950e <_printf_i+0xf2>
 8009508:	0646      	lsls	r6, r0, #25
 800950a:	d5fb      	bpl.n	8009504 <_printf_i+0xe8>
 800950c:	881e      	ldrh	r6, [r3, #0]
 800950e:	4854      	ldr	r0, [pc, #336]	; (8009660 <_printf_i+0x244>)
 8009510:	2f6f      	cmp	r7, #111	; 0x6f
 8009512:	bf0c      	ite	eq
 8009514:	2308      	moveq	r3, #8
 8009516:	230a      	movne	r3, #10
 8009518:	2100      	movs	r1, #0
 800951a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800951e:	6865      	ldr	r5, [r4, #4]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	2d00      	cmp	r5, #0
 8009524:	bfa2      	ittt	ge
 8009526:	6821      	ldrge	r1, [r4, #0]
 8009528:	f021 0104 	bicge.w	r1, r1, #4
 800952c:	6021      	strge	r1, [r4, #0]
 800952e:	b90e      	cbnz	r6, 8009534 <_printf_i+0x118>
 8009530:	2d00      	cmp	r5, #0
 8009532:	d04d      	beq.n	80095d0 <_printf_i+0x1b4>
 8009534:	4615      	mov	r5, r2
 8009536:	fbb6 f1f3 	udiv	r1, r6, r3
 800953a:	fb03 6711 	mls	r7, r3, r1, r6
 800953e:	5dc7      	ldrb	r7, [r0, r7]
 8009540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009544:	4637      	mov	r7, r6
 8009546:	42bb      	cmp	r3, r7
 8009548:	460e      	mov	r6, r1
 800954a:	d9f4      	bls.n	8009536 <_printf_i+0x11a>
 800954c:	2b08      	cmp	r3, #8
 800954e:	d10b      	bne.n	8009568 <_printf_i+0x14c>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07de      	lsls	r6, r3, #31
 8009554:	d508      	bpl.n	8009568 <_printf_i+0x14c>
 8009556:	6923      	ldr	r3, [r4, #16]
 8009558:	6861      	ldr	r1, [r4, #4]
 800955a:	4299      	cmp	r1, r3
 800955c:	bfde      	ittt	le
 800955e:	2330      	movle	r3, #48	; 0x30
 8009560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009564:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009568:	1b52      	subs	r2, r2, r5
 800956a:	6122      	str	r2, [r4, #16]
 800956c:	f8cd a000 	str.w	sl, [sp]
 8009570:	464b      	mov	r3, r9
 8009572:	aa03      	add	r2, sp, #12
 8009574:	4621      	mov	r1, r4
 8009576:	4640      	mov	r0, r8
 8009578:	f7ff fee2 	bl	8009340 <_printf_common>
 800957c:	3001      	adds	r0, #1
 800957e:	d14c      	bne.n	800961a <_printf_i+0x1fe>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b004      	add	sp, #16
 8009586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958a:	4835      	ldr	r0, [pc, #212]	; (8009660 <_printf_i+0x244>)
 800958c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009590:	6829      	ldr	r1, [r5, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f851 6b04 	ldr.w	r6, [r1], #4
 8009598:	6029      	str	r1, [r5, #0]
 800959a:	061d      	lsls	r5, r3, #24
 800959c:	d514      	bpl.n	80095c8 <_printf_i+0x1ac>
 800959e:	07df      	lsls	r7, r3, #31
 80095a0:	bf44      	itt	mi
 80095a2:	f043 0320 	orrmi.w	r3, r3, #32
 80095a6:	6023      	strmi	r3, [r4, #0]
 80095a8:	b91e      	cbnz	r6, 80095b2 <_printf_i+0x196>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	f023 0320 	bic.w	r3, r3, #32
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	2310      	movs	r3, #16
 80095b4:	e7b0      	b.n	8009518 <_printf_i+0xfc>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	f043 0320 	orr.w	r3, r3, #32
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	2378      	movs	r3, #120	; 0x78
 80095c0:	4828      	ldr	r0, [pc, #160]	; (8009664 <_printf_i+0x248>)
 80095c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095c6:	e7e3      	b.n	8009590 <_printf_i+0x174>
 80095c8:	0659      	lsls	r1, r3, #25
 80095ca:	bf48      	it	mi
 80095cc:	b2b6      	uxthmi	r6, r6
 80095ce:	e7e6      	b.n	800959e <_printf_i+0x182>
 80095d0:	4615      	mov	r5, r2
 80095d2:	e7bb      	b.n	800954c <_printf_i+0x130>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	6826      	ldr	r6, [r4, #0]
 80095d8:	6961      	ldr	r1, [r4, #20]
 80095da:	1d18      	adds	r0, r3, #4
 80095dc:	6028      	str	r0, [r5, #0]
 80095de:	0635      	lsls	r5, r6, #24
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	d501      	bpl.n	80095e8 <_printf_i+0x1cc>
 80095e4:	6019      	str	r1, [r3, #0]
 80095e6:	e002      	b.n	80095ee <_printf_i+0x1d2>
 80095e8:	0670      	lsls	r0, r6, #25
 80095ea:	d5fb      	bpl.n	80095e4 <_printf_i+0x1c8>
 80095ec:	8019      	strh	r1, [r3, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	4615      	mov	r5, r2
 80095f4:	e7ba      	b.n	800956c <_printf_i+0x150>
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	1d1a      	adds	r2, r3, #4
 80095fa:	602a      	str	r2, [r5, #0]
 80095fc:	681d      	ldr	r5, [r3, #0]
 80095fe:	6862      	ldr	r2, [r4, #4]
 8009600:	2100      	movs	r1, #0
 8009602:	4628      	mov	r0, r5
 8009604:	f7f6 fdec 	bl	80001e0 <memchr>
 8009608:	b108      	cbz	r0, 800960e <_printf_i+0x1f2>
 800960a:	1b40      	subs	r0, r0, r5
 800960c:	6060      	str	r0, [r4, #4]
 800960e:	6863      	ldr	r3, [r4, #4]
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	2300      	movs	r3, #0
 8009614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009618:	e7a8      	b.n	800956c <_printf_i+0x150>
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	462a      	mov	r2, r5
 800961e:	4649      	mov	r1, r9
 8009620:	4640      	mov	r0, r8
 8009622:	47d0      	blx	sl
 8009624:	3001      	adds	r0, #1
 8009626:	d0ab      	beq.n	8009580 <_printf_i+0x164>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	079b      	lsls	r3, r3, #30
 800962c:	d413      	bmi.n	8009656 <_printf_i+0x23a>
 800962e:	68e0      	ldr	r0, [r4, #12]
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	4298      	cmp	r0, r3
 8009634:	bfb8      	it	lt
 8009636:	4618      	movlt	r0, r3
 8009638:	e7a4      	b.n	8009584 <_printf_i+0x168>
 800963a:	2301      	movs	r3, #1
 800963c:	4632      	mov	r2, r6
 800963e:	4649      	mov	r1, r9
 8009640:	4640      	mov	r0, r8
 8009642:	47d0      	blx	sl
 8009644:	3001      	adds	r0, #1
 8009646:	d09b      	beq.n	8009580 <_printf_i+0x164>
 8009648:	3501      	adds	r5, #1
 800964a:	68e3      	ldr	r3, [r4, #12]
 800964c:	9903      	ldr	r1, [sp, #12]
 800964e:	1a5b      	subs	r3, r3, r1
 8009650:	42ab      	cmp	r3, r5
 8009652:	dcf2      	bgt.n	800963a <_printf_i+0x21e>
 8009654:	e7eb      	b.n	800962e <_printf_i+0x212>
 8009656:	2500      	movs	r5, #0
 8009658:	f104 0619 	add.w	r6, r4, #25
 800965c:	e7f5      	b.n	800964a <_printf_i+0x22e>
 800965e:	bf00      	nop
 8009660:	08009eb5 	.word	0x08009eb5
 8009664:	08009ec6 	.word	0x08009ec6

08009668 <memcpy>:
 8009668:	440a      	add	r2, r1
 800966a:	4291      	cmp	r1, r2
 800966c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009670:	d100      	bne.n	8009674 <memcpy+0xc>
 8009672:	4770      	bx	lr
 8009674:	b510      	push	{r4, lr}
 8009676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800967a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800967e:	4291      	cmp	r1, r2
 8009680:	d1f9      	bne.n	8009676 <memcpy+0xe>
 8009682:	bd10      	pop	{r4, pc}

08009684 <memmove>:
 8009684:	4288      	cmp	r0, r1
 8009686:	b510      	push	{r4, lr}
 8009688:	eb01 0402 	add.w	r4, r1, r2
 800968c:	d902      	bls.n	8009694 <memmove+0x10>
 800968e:	4284      	cmp	r4, r0
 8009690:	4623      	mov	r3, r4
 8009692:	d807      	bhi.n	80096a4 <memmove+0x20>
 8009694:	1e43      	subs	r3, r0, #1
 8009696:	42a1      	cmp	r1, r4
 8009698:	d008      	beq.n	80096ac <memmove+0x28>
 800969a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800969e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096a2:	e7f8      	b.n	8009696 <memmove+0x12>
 80096a4:	4402      	add	r2, r0
 80096a6:	4601      	mov	r1, r0
 80096a8:	428a      	cmp	r2, r1
 80096aa:	d100      	bne.n	80096ae <memmove+0x2a>
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096b6:	e7f7      	b.n	80096a8 <memmove+0x24>

080096b8 <_free_r>:
 80096b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ba:	2900      	cmp	r1, #0
 80096bc:	d044      	beq.n	8009748 <_free_r+0x90>
 80096be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c2:	9001      	str	r0, [sp, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ca:	bfb8      	it	lt
 80096cc:	18e4      	addlt	r4, r4, r3
 80096ce:	f000 f913 	bl	80098f8 <__malloc_lock>
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <_free_r+0x94>)
 80096d4:	9801      	ldr	r0, [sp, #4]
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	b933      	cbnz	r3, 80096e8 <_free_r+0x30>
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	6014      	str	r4, [r2, #0]
 80096de:	b003      	add	sp, #12
 80096e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e4:	f000 b90e 	b.w	8009904 <__malloc_unlock>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d908      	bls.n	80096fe <_free_r+0x46>
 80096ec:	6825      	ldr	r5, [r4, #0]
 80096ee:	1961      	adds	r1, r4, r5
 80096f0:	428b      	cmp	r3, r1
 80096f2:	bf01      	itttt	eq
 80096f4:	6819      	ldreq	r1, [r3, #0]
 80096f6:	685b      	ldreq	r3, [r3, #4]
 80096f8:	1949      	addeq	r1, r1, r5
 80096fa:	6021      	streq	r1, [r4, #0]
 80096fc:	e7ed      	b.n	80096da <_free_r+0x22>
 80096fe:	461a      	mov	r2, r3
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	b10b      	cbz	r3, 8009708 <_free_r+0x50>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d9fa      	bls.n	80096fe <_free_r+0x46>
 8009708:	6811      	ldr	r1, [r2, #0]
 800970a:	1855      	adds	r5, r2, r1
 800970c:	42a5      	cmp	r5, r4
 800970e:	d10b      	bne.n	8009728 <_free_r+0x70>
 8009710:	6824      	ldr	r4, [r4, #0]
 8009712:	4421      	add	r1, r4
 8009714:	1854      	adds	r4, r2, r1
 8009716:	42a3      	cmp	r3, r4
 8009718:	6011      	str	r1, [r2, #0]
 800971a:	d1e0      	bne.n	80096de <_free_r+0x26>
 800971c:	681c      	ldr	r4, [r3, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	6053      	str	r3, [r2, #4]
 8009722:	4421      	add	r1, r4
 8009724:	6011      	str	r1, [r2, #0]
 8009726:	e7da      	b.n	80096de <_free_r+0x26>
 8009728:	d902      	bls.n	8009730 <_free_r+0x78>
 800972a:	230c      	movs	r3, #12
 800972c:	6003      	str	r3, [r0, #0]
 800972e:	e7d6      	b.n	80096de <_free_r+0x26>
 8009730:	6825      	ldr	r5, [r4, #0]
 8009732:	1961      	adds	r1, r4, r5
 8009734:	428b      	cmp	r3, r1
 8009736:	bf04      	itt	eq
 8009738:	6819      	ldreq	r1, [r3, #0]
 800973a:	685b      	ldreq	r3, [r3, #4]
 800973c:	6063      	str	r3, [r4, #4]
 800973e:	bf04      	itt	eq
 8009740:	1949      	addeq	r1, r1, r5
 8009742:	6021      	streq	r1, [r4, #0]
 8009744:	6054      	str	r4, [r2, #4]
 8009746:	e7ca      	b.n	80096de <_free_r+0x26>
 8009748:	b003      	add	sp, #12
 800974a:	bd30      	pop	{r4, r5, pc}
 800974c:	20000180 	.word	0x20000180

08009750 <sbrk_aligned>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	4e0e      	ldr	r6, [pc, #56]	; (800978c <sbrk_aligned+0x3c>)
 8009754:	460c      	mov	r4, r1
 8009756:	6831      	ldr	r1, [r6, #0]
 8009758:	4605      	mov	r5, r0
 800975a:	b911      	cbnz	r1, 8009762 <sbrk_aligned+0x12>
 800975c:	f000 f8bc 	bl	80098d8 <_sbrk_r>
 8009760:	6030      	str	r0, [r6, #0]
 8009762:	4621      	mov	r1, r4
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f8b7 	bl	80098d8 <_sbrk_r>
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	d00a      	beq.n	8009784 <sbrk_aligned+0x34>
 800976e:	1cc4      	adds	r4, r0, #3
 8009770:	f024 0403 	bic.w	r4, r4, #3
 8009774:	42a0      	cmp	r0, r4
 8009776:	d007      	beq.n	8009788 <sbrk_aligned+0x38>
 8009778:	1a21      	subs	r1, r4, r0
 800977a:	4628      	mov	r0, r5
 800977c:	f000 f8ac 	bl	80098d8 <_sbrk_r>
 8009780:	3001      	adds	r0, #1
 8009782:	d101      	bne.n	8009788 <sbrk_aligned+0x38>
 8009784:	f04f 34ff 	mov.w	r4, #4294967295
 8009788:	4620      	mov	r0, r4
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	20000184 	.word	0x20000184

08009790 <_malloc_r>:
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	1ccd      	adds	r5, r1, #3
 8009796:	f025 0503 	bic.w	r5, r5, #3
 800979a:	3508      	adds	r5, #8
 800979c:	2d0c      	cmp	r5, #12
 800979e:	bf38      	it	cc
 80097a0:	250c      	movcc	r5, #12
 80097a2:	2d00      	cmp	r5, #0
 80097a4:	4607      	mov	r7, r0
 80097a6:	db01      	blt.n	80097ac <_malloc_r+0x1c>
 80097a8:	42a9      	cmp	r1, r5
 80097aa:	d905      	bls.n	80097b8 <_malloc_r+0x28>
 80097ac:	230c      	movs	r3, #12
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	2600      	movs	r6, #0
 80097b2:	4630      	mov	r0, r6
 80097b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b8:	4e2e      	ldr	r6, [pc, #184]	; (8009874 <_malloc_r+0xe4>)
 80097ba:	f000 f89d 	bl	80098f8 <__malloc_lock>
 80097be:	6833      	ldr	r3, [r6, #0]
 80097c0:	461c      	mov	r4, r3
 80097c2:	bb34      	cbnz	r4, 8009812 <_malloc_r+0x82>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4638      	mov	r0, r7
 80097c8:	f7ff ffc2 	bl	8009750 <sbrk_aligned>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	4604      	mov	r4, r0
 80097d0:	d14d      	bne.n	800986e <_malloc_r+0xde>
 80097d2:	6834      	ldr	r4, [r6, #0]
 80097d4:	4626      	mov	r6, r4
 80097d6:	2e00      	cmp	r6, #0
 80097d8:	d140      	bne.n	800985c <_malloc_r+0xcc>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	4631      	mov	r1, r6
 80097de:	4638      	mov	r0, r7
 80097e0:	eb04 0803 	add.w	r8, r4, r3
 80097e4:	f000 f878 	bl	80098d8 <_sbrk_r>
 80097e8:	4580      	cmp	r8, r0
 80097ea:	d13a      	bne.n	8009862 <_malloc_r+0xd2>
 80097ec:	6821      	ldr	r1, [r4, #0]
 80097ee:	3503      	adds	r5, #3
 80097f0:	1a6d      	subs	r5, r5, r1
 80097f2:	f025 0503 	bic.w	r5, r5, #3
 80097f6:	3508      	adds	r5, #8
 80097f8:	2d0c      	cmp	r5, #12
 80097fa:	bf38      	it	cc
 80097fc:	250c      	movcc	r5, #12
 80097fe:	4629      	mov	r1, r5
 8009800:	4638      	mov	r0, r7
 8009802:	f7ff ffa5 	bl	8009750 <sbrk_aligned>
 8009806:	3001      	adds	r0, #1
 8009808:	d02b      	beq.n	8009862 <_malloc_r+0xd2>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	442b      	add	r3, r5
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	e00e      	b.n	8009830 <_malloc_r+0xa0>
 8009812:	6822      	ldr	r2, [r4, #0]
 8009814:	1b52      	subs	r2, r2, r5
 8009816:	d41e      	bmi.n	8009856 <_malloc_r+0xc6>
 8009818:	2a0b      	cmp	r2, #11
 800981a:	d916      	bls.n	800984a <_malloc_r+0xba>
 800981c:	1961      	adds	r1, r4, r5
 800981e:	42a3      	cmp	r3, r4
 8009820:	6025      	str	r5, [r4, #0]
 8009822:	bf18      	it	ne
 8009824:	6059      	strne	r1, [r3, #4]
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	bf08      	it	eq
 800982a:	6031      	streq	r1, [r6, #0]
 800982c:	5162      	str	r2, [r4, r5]
 800982e:	604b      	str	r3, [r1, #4]
 8009830:	4638      	mov	r0, r7
 8009832:	f104 060b 	add.w	r6, r4, #11
 8009836:	f000 f865 	bl	8009904 <__malloc_unlock>
 800983a:	f026 0607 	bic.w	r6, r6, #7
 800983e:	1d23      	adds	r3, r4, #4
 8009840:	1af2      	subs	r2, r6, r3
 8009842:	d0b6      	beq.n	80097b2 <_malloc_r+0x22>
 8009844:	1b9b      	subs	r3, r3, r6
 8009846:	50a3      	str	r3, [r4, r2]
 8009848:	e7b3      	b.n	80097b2 <_malloc_r+0x22>
 800984a:	6862      	ldr	r2, [r4, #4]
 800984c:	42a3      	cmp	r3, r4
 800984e:	bf0c      	ite	eq
 8009850:	6032      	streq	r2, [r6, #0]
 8009852:	605a      	strne	r2, [r3, #4]
 8009854:	e7ec      	b.n	8009830 <_malloc_r+0xa0>
 8009856:	4623      	mov	r3, r4
 8009858:	6864      	ldr	r4, [r4, #4]
 800985a:	e7b2      	b.n	80097c2 <_malloc_r+0x32>
 800985c:	4634      	mov	r4, r6
 800985e:	6876      	ldr	r6, [r6, #4]
 8009860:	e7b9      	b.n	80097d6 <_malloc_r+0x46>
 8009862:	230c      	movs	r3, #12
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	4638      	mov	r0, r7
 8009868:	f000 f84c 	bl	8009904 <__malloc_unlock>
 800986c:	e7a1      	b.n	80097b2 <_malloc_r+0x22>
 800986e:	6025      	str	r5, [r4, #0]
 8009870:	e7de      	b.n	8009830 <_malloc_r+0xa0>
 8009872:	bf00      	nop
 8009874:	20000180 	.word	0x20000180

08009878 <_realloc_r>:
 8009878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987c:	4680      	mov	r8, r0
 800987e:	4614      	mov	r4, r2
 8009880:	460e      	mov	r6, r1
 8009882:	b921      	cbnz	r1, 800988e <_realloc_r+0x16>
 8009884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	4611      	mov	r1, r2
 800988a:	f7ff bf81 	b.w	8009790 <_malloc_r>
 800988e:	b92a      	cbnz	r2, 800989c <_realloc_r+0x24>
 8009890:	f7ff ff12 	bl	80096b8 <_free_r>
 8009894:	4625      	mov	r5, r4
 8009896:	4628      	mov	r0, r5
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	f000 f838 	bl	8009910 <_malloc_usable_size_r>
 80098a0:	4284      	cmp	r4, r0
 80098a2:	4607      	mov	r7, r0
 80098a4:	d802      	bhi.n	80098ac <_realloc_r+0x34>
 80098a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098aa:	d812      	bhi.n	80098d2 <_realloc_r+0x5a>
 80098ac:	4621      	mov	r1, r4
 80098ae:	4640      	mov	r0, r8
 80098b0:	f7ff ff6e 	bl	8009790 <_malloc_r>
 80098b4:	4605      	mov	r5, r0
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d0ed      	beq.n	8009896 <_realloc_r+0x1e>
 80098ba:	42bc      	cmp	r4, r7
 80098bc:	4622      	mov	r2, r4
 80098be:	4631      	mov	r1, r6
 80098c0:	bf28      	it	cs
 80098c2:	463a      	movcs	r2, r7
 80098c4:	f7ff fed0 	bl	8009668 <memcpy>
 80098c8:	4631      	mov	r1, r6
 80098ca:	4640      	mov	r0, r8
 80098cc:	f7ff fef4 	bl	80096b8 <_free_r>
 80098d0:	e7e1      	b.n	8009896 <_realloc_r+0x1e>
 80098d2:	4635      	mov	r5, r6
 80098d4:	e7df      	b.n	8009896 <_realloc_r+0x1e>
	...

080098d8 <_sbrk_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d06      	ldr	r5, [pc, #24]	; (80098f4 <_sbrk_r+0x1c>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	f7f8 fb90 	bl	8002008 <_sbrk>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_sbrk_r+0x1a>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_sbrk_r+0x1a>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20000188 	.word	0x20000188

080098f8 <__malloc_lock>:
 80098f8:	4801      	ldr	r0, [pc, #4]	; (8009900 <__malloc_lock+0x8>)
 80098fa:	f000 b811 	b.w	8009920 <__retarget_lock_acquire_recursive>
 80098fe:	bf00      	nop
 8009900:	2000018c 	.word	0x2000018c

08009904 <__malloc_unlock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_unlock+0x8>)
 8009906:	f000 b80c 	b.w	8009922 <__retarget_lock_release_recursive>
 800990a:	bf00      	nop
 800990c:	2000018c 	.word	0x2000018c

08009910 <_malloc_usable_size_r>:
 8009910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009914:	1f18      	subs	r0, r3, #4
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfbc      	itt	lt
 800991a:	580b      	ldrlt	r3, [r1, r0]
 800991c:	18c0      	addlt	r0, r0, r3
 800991e:	4770      	bx	lr

08009920 <__retarget_lock_acquire_recursive>:
 8009920:	4770      	bx	lr

08009922 <__retarget_lock_release_recursive>:
 8009922:	4770      	bx	lr
 8009924:	0000      	movs	r0, r0
	...

08009928 <atan>:
 8009928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	ec55 4b10 	vmov	r4, r5, d0
 8009930:	4bc3      	ldr	r3, [pc, #780]	; (8009c40 <atan+0x318>)
 8009932:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009936:	429e      	cmp	r6, r3
 8009938:	46ab      	mov	fp, r5
 800993a:	dd18      	ble.n	800996e <atan+0x46>
 800993c:	4bc1      	ldr	r3, [pc, #772]	; (8009c44 <atan+0x31c>)
 800993e:	429e      	cmp	r6, r3
 8009940:	dc01      	bgt.n	8009946 <atan+0x1e>
 8009942:	d109      	bne.n	8009958 <atan+0x30>
 8009944:	b144      	cbz	r4, 8009958 <atan+0x30>
 8009946:	4622      	mov	r2, r4
 8009948:	462b      	mov	r3, r5
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f6 fc9d 	bl	800028c <__adddf3>
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	e006      	b.n	8009966 <atan+0x3e>
 8009958:	f1bb 0f00 	cmp.w	fp, #0
 800995c:	f300 8131 	bgt.w	8009bc2 <atan+0x29a>
 8009960:	a59b      	add	r5, pc, #620	; (adr r5, 8009bd0 <atan+0x2a8>)
 8009962:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009966:	ec45 4b10 	vmov	d0, r4, r5
 800996a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996e:	4bb6      	ldr	r3, [pc, #728]	; (8009c48 <atan+0x320>)
 8009970:	429e      	cmp	r6, r3
 8009972:	dc14      	bgt.n	800999e <atan+0x76>
 8009974:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009978:	429e      	cmp	r6, r3
 800997a:	dc0d      	bgt.n	8009998 <atan+0x70>
 800997c:	a396      	add	r3, pc, #600	; (adr r3, 8009bd8 <atan+0x2b0>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	ee10 0a10 	vmov	r0, s0
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 fc80 	bl	800028c <__adddf3>
 800998c:	4baf      	ldr	r3, [pc, #700]	; (8009c4c <atan+0x324>)
 800998e:	2200      	movs	r2, #0
 8009990:	f7f7 f8c2 	bl	8000b18 <__aeabi_dcmpgt>
 8009994:	2800      	cmp	r0, #0
 8009996:	d1e6      	bne.n	8009966 <atan+0x3e>
 8009998:	f04f 3aff 	mov.w	sl, #4294967295
 800999c:	e02b      	b.n	80099f6 <atan+0xce>
 800999e:	f000 f963 	bl	8009c68 <fabs>
 80099a2:	4bab      	ldr	r3, [pc, #684]	; (8009c50 <atan+0x328>)
 80099a4:	429e      	cmp	r6, r3
 80099a6:	ec55 4b10 	vmov	r4, r5, d0
 80099aa:	f300 80bf 	bgt.w	8009b2c <atan+0x204>
 80099ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099b2:	429e      	cmp	r6, r3
 80099b4:	f300 80a0 	bgt.w	8009af8 <atan+0x1d0>
 80099b8:	ee10 2a10 	vmov	r2, s0
 80099bc:	ee10 0a10 	vmov	r0, s0
 80099c0:	462b      	mov	r3, r5
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7f6 fc62 	bl	800028c <__adddf3>
 80099c8:	4ba0      	ldr	r3, [pc, #640]	; (8009c4c <atan+0x324>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7f6 fc5c 	bl	8000288 <__aeabi_dsub>
 80099d0:	2200      	movs	r2, #0
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099da:	4620      	mov	r0, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	f7f6 fc55 	bl	800028c <__adddf3>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 ff2f 	bl	800084c <__aeabi_ddiv>
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	460d      	mov	r5, r1
 80099f6:	4622      	mov	r2, r4
 80099f8:	462b      	mov	r3, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7f6 fdfb 	bl	80005f8 <__aeabi_dmul>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4680      	mov	r8, r0
 8009a08:	4689      	mov	r9, r1
 8009a0a:	f7f6 fdf5 	bl	80005f8 <__aeabi_dmul>
 8009a0e:	a374      	add	r3, pc, #464	; (adr r3, 8009be0 <atan+0x2b8>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	4606      	mov	r6, r0
 8009a16:	460f      	mov	r7, r1
 8009a18:	f7f6 fdee 	bl	80005f8 <__aeabi_dmul>
 8009a1c:	a372      	add	r3, pc, #456	; (adr r3, 8009be8 <atan+0x2c0>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc33 	bl	800028c <__adddf3>
 8009a26:	4632      	mov	r2, r6
 8009a28:	463b      	mov	r3, r7
 8009a2a:	f7f6 fde5 	bl	80005f8 <__aeabi_dmul>
 8009a2e:	a370      	add	r3, pc, #448	; (adr r3, 8009bf0 <atan+0x2c8>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fc2a 	bl	800028c <__adddf3>
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	f7f6 fddc 	bl	80005f8 <__aeabi_dmul>
 8009a40:	a36d      	add	r3, pc, #436	; (adr r3, 8009bf8 <atan+0x2d0>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fc21 	bl	800028c <__adddf3>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	f7f6 fdd3 	bl	80005f8 <__aeabi_dmul>
 8009a52:	a36b      	add	r3, pc, #428	; (adr r3, 8009c00 <atan+0x2d8>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fc18 	bl	800028c <__adddf3>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f6 fdca 	bl	80005f8 <__aeabi_dmul>
 8009a64:	a368      	add	r3, pc, #416	; (adr r3, 8009c08 <atan+0x2e0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fc0f 	bl	800028c <__adddf3>
 8009a6e:	4642      	mov	r2, r8
 8009a70:	464b      	mov	r3, r9
 8009a72:	f7f6 fdc1 	bl	80005f8 <__aeabi_dmul>
 8009a76:	a366      	add	r3, pc, #408	; (adr r3, 8009c10 <atan+0x2e8>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f6 fdb8 	bl	80005f8 <__aeabi_dmul>
 8009a88:	a363      	add	r3, pc, #396	; (adr r3, 8009c18 <atan+0x2f0>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fbfb 	bl	8000288 <__aeabi_dsub>
 8009a92:	4632      	mov	r2, r6
 8009a94:	463b      	mov	r3, r7
 8009a96:	f7f6 fdaf 	bl	80005f8 <__aeabi_dmul>
 8009a9a:	a361      	add	r3, pc, #388	; (adr r3, 8009c20 <atan+0x2f8>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fbf2 	bl	8000288 <__aeabi_dsub>
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	f7f6 fda6 	bl	80005f8 <__aeabi_dmul>
 8009aac:	a35e      	add	r3, pc, #376	; (adr r3, 8009c28 <atan+0x300>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fbe9 	bl	8000288 <__aeabi_dsub>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	463b      	mov	r3, r7
 8009aba:	f7f6 fd9d 	bl	80005f8 <__aeabi_dmul>
 8009abe:	a35c      	add	r3, pc, #368	; (adr r3, 8009c30 <atan+0x308>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fbe0 	bl	8000288 <__aeabi_dsub>
 8009ac8:	4632      	mov	r2, r6
 8009aca:	463b      	mov	r3, r7
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	f7f6 fbd8 	bl	800028c <__adddf3>
 8009adc:	4622      	mov	r2, r4
 8009ade:	462b      	mov	r3, r5
 8009ae0:	f7f6 fd8a 	bl	80005f8 <__aeabi_dmul>
 8009ae4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	d14b      	bne.n	8009b86 <atan+0x25e>
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 fbc9 	bl	8000288 <__aeabi_dsub>
 8009af6:	e72c      	b.n	8009952 <atan+0x2a>
 8009af8:	ee10 0a10 	vmov	r0, s0
 8009afc:	4b53      	ldr	r3, [pc, #332]	; (8009c4c <atan+0x324>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fbc1 	bl	8000288 <__aeabi_dsub>
 8009b06:	4b51      	ldr	r3, [pc, #324]	; (8009c4c <atan+0x324>)
 8009b08:	4606      	mov	r6, r0
 8009b0a:	460f      	mov	r7, r1
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 fbbb 	bl	800028c <__adddf3>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	f7f6 fe95 	bl	800084c <__aeabi_ddiv>
 8009b22:	f04f 0a01 	mov.w	sl, #1
 8009b26:	4604      	mov	r4, r0
 8009b28:	460d      	mov	r5, r1
 8009b2a:	e764      	b.n	80099f6 <atan+0xce>
 8009b2c:	4b49      	ldr	r3, [pc, #292]	; (8009c54 <atan+0x32c>)
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	da1d      	bge.n	8009b6e <atan+0x246>
 8009b32:	ee10 0a10 	vmov	r0, s0
 8009b36:	4b48      	ldr	r3, [pc, #288]	; (8009c58 <atan+0x330>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fba4 	bl	8000288 <__aeabi_dsub>
 8009b40:	4b45      	ldr	r3, [pc, #276]	; (8009c58 <atan+0x330>)
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	2200      	movs	r2, #0
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fd54 	bl	80005f8 <__aeabi_dmul>
 8009b50:	4b3e      	ldr	r3, [pc, #248]	; (8009c4c <atan+0x324>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fb9a 	bl	800028c <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 fe74 	bl	800084c <__aeabi_ddiv>
 8009b64:	f04f 0a02 	mov.w	sl, #2
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	e743      	b.n	80099f6 <atan+0xce>
 8009b6e:	462b      	mov	r3, r5
 8009b70:	ee10 2a10 	vmov	r2, s0
 8009b74:	4939      	ldr	r1, [pc, #228]	; (8009c5c <atan+0x334>)
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7f6 fe68 	bl	800084c <__aeabi_ddiv>
 8009b7c:	f04f 0a03 	mov.w	sl, #3
 8009b80:	4604      	mov	r4, r0
 8009b82:	460d      	mov	r5, r1
 8009b84:	e737      	b.n	80099f6 <atan+0xce>
 8009b86:	4b36      	ldr	r3, [pc, #216]	; (8009c60 <atan+0x338>)
 8009b88:	4e36      	ldr	r6, [pc, #216]	; (8009c64 <atan+0x33c>)
 8009b8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009b8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009b92:	e9da 2300 	ldrd	r2, r3, [sl]
 8009b96:	f7f6 fb77 	bl	8000288 <__aeabi_dsub>
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	f7f6 fb73 	bl	8000288 <__aeabi_dsub>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009baa:	f7f6 fb6d 	bl	8000288 <__aeabi_dsub>
 8009bae:	f1bb 0f00 	cmp.w	fp, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	f6bf aed6 	bge.w	8009966 <atan+0x3e>
 8009bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	e6d1      	b.n	8009966 <atan+0x3e>
 8009bc2:	a51d      	add	r5, pc, #116	; (adr r5, 8009c38 <atan+0x310>)
 8009bc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bc8:	e6cd      	b.n	8009966 <atan+0x3e>
 8009bca:	bf00      	nop
 8009bcc:	f3af 8000 	nop.w
 8009bd0:	54442d18 	.word	0x54442d18
 8009bd4:	bff921fb 	.word	0xbff921fb
 8009bd8:	8800759c 	.word	0x8800759c
 8009bdc:	7e37e43c 	.word	0x7e37e43c
 8009be0:	e322da11 	.word	0xe322da11
 8009be4:	3f90ad3a 	.word	0x3f90ad3a
 8009be8:	24760deb 	.word	0x24760deb
 8009bec:	3fa97b4b 	.word	0x3fa97b4b
 8009bf0:	a0d03d51 	.word	0xa0d03d51
 8009bf4:	3fb10d66 	.word	0x3fb10d66
 8009bf8:	c54c206e 	.word	0xc54c206e
 8009bfc:	3fb745cd 	.word	0x3fb745cd
 8009c00:	920083ff 	.word	0x920083ff
 8009c04:	3fc24924 	.word	0x3fc24924
 8009c08:	5555550d 	.word	0x5555550d
 8009c0c:	3fd55555 	.word	0x3fd55555
 8009c10:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c14:	bfa2b444 	.word	0xbfa2b444
 8009c18:	52defd9a 	.word	0x52defd9a
 8009c1c:	3fadde2d 	.word	0x3fadde2d
 8009c20:	af749a6d 	.word	0xaf749a6d
 8009c24:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c28:	fe231671 	.word	0xfe231671
 8009c2c:	3fbc71c6 	.word	0x3fbc71c6
 8009c30:	9998ebc4 	.word	0x9998ebc4
 8009c34:	3fc99999 	.word	0x3fc99999
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	3ff921fb 	.word	0x3ff921fb
 8009c40:	440fffff 	.word	0x440fffff
 8009c44:	7ff00000 	.word	0x7ff00000
 8009c48:	3fdbffff 	.word	0x3fdbffff
 8009c4c:	3ff00000 	.word	0x3ff00000
 8009c50:	3ff2ffff 	.word	0x3ff2ffff
 8009c54:	40038000 	.word	0x40038000
 8009c58:	3ff80000 	.word	0x3ff80000
 8009c5c:	bff00000 	.word	0xbff00000
 8009c60:	08009ef8 	.word	0x08009ef8
 8009c64:	08009ed8 	.word	0x08009ed8

08009c68 <fabs>:
 8009c68:	ec51 0b10 	vmov	r0, r1, d0
 8009c6c:	ee10 2a10 	vmov	r2, s0
 8009c70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c74:	ec43 2b10 	vmov	d0, r2, r3
 8009c78:	4770      	bx	lr

08009c7a <sqrt>:
 8009c7a:	b538      	push	{r3, r4, r5, lr}
 8009c7c:	ed2d 8b02 	vpush	{d8}
 8009c80:	ec55 4b10 	vmov	r4, r5, d0
 8009c84:	f000 f826 	bl	8009cd4 <__ieee754_sqrt>
 8009c88:	4622      	mov	r2, r4
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	4629      	mov	r1, r5
 8009c90:	eeb0 8a40 	vmov.f32	s16, s0
 8009c94:	eef0 8a60 	vmov.f32	s17, s1
 8009c98:	f7f6 ff48 	bl	8000b2c <__aeabi_dcmpun>
 8009c9c:	b990      	cbnz	r0, 8009cc4 <sqrt+0x4a>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7f6 ff19 	bl	8000adc <__aeabi_dcmplt>
 8009caa:	b158      	cbz	r0, 8009cc4 <sqrt+0x4a>
 8009cac:	f7ff f984 	bl	8008fb8 <__errno>
 8009cb0:	2321      	movs	r3, #33	; 0x21
 8009cb2:	6003      	str	r3, [r0, #0]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4619      	mov	r1, r3
 8009cbc:	f7f6 fdc6 	bl	800084c <__aeabi_ddiv>
 8009cc0:	ec41 0b18 	vmov	d8, r0, r1
 8009cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cc8:	eef0 0a68 	vmov.f32	s1, s17
 8009ccc:	ecbd 8b02 	vpop	{d8}
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
	...

08009cd4 <__ieee754_sqrt>:
 8009cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd8:	ec55 4b10 	vmov	r4, r5, d0
 8009cdc:	4e55      	ldr	r6, [pc, #340]	; (8009e34 <__ieee754_sqrt+0x160>)
 8009cde:	43ae      	bics	r6, r5
 8009ce0:	ee10 0a10 	vmov	r0, s0
 8009ce4:	ee10 3a10 	vmov	r3, s0
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4629      	mov	r1, r5
 8009cec:	d110      	bne.n	8009d10 <__ieee754_sqrt+0x3c>
 8009cee:	ee10 2a10 	vmov	r2, s0
 8009cf2:	462b      	mov	r3, r5
 8009cf4:	f7f6 fc80 	bl	80005f8 <__aeabi_dmul>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f6 fac4 	bl	800028c <__adddf3>
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	ec45 4b10 	vmov	d0, r4, r5
 8009d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	dc10      	bgt.n	8009d36 <__ieee754_sqrt+0x62>
 8009d14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d18:	4330      	orrs	r0, r6
 8009d1a:	d0f5      	beq.n	8009d08 <__ieee754_sqrt+0x34>
 8009d1c:	b15d      	cbz	r5, 8009d36 <__ieee754_sqrt+0x62>
 8009d1e:	ee10 2a10 	vmov	r2, s0
 8009d22:	462b      	mov	r3, r5
 8009d24:	ee10 0a10 	vmov	r0, s0
 8009d28:	f7f6 faae 	bl	8000288 <__aeabi_dsub>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	f7f6 fd8c 	bl	800084c <__aeabi_ddiv>
 8009d34:	e7e6      	b.n	8009d04 <__ieee754_sqrt+0x30>
 8009d36:	1512      	asrs	r2, r2, #20
 8009d38:	d074      	beq.n	8009e24 <__ieee754_sqrt+0x150>
 8009d3a:	07d4      	lsls	r4, r2, #31
 8009d3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009d40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009d48:	bf5e      	ittt	pl
 8009d4a:	0fda      	lsrpl	r2, r3, #31
 8009d4c:	005b      	lslpl	r3, r3, #1
 8009d4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009d52:	2400      	movs	r4, #0
 8009d54:	0fda      	lsrs	r2, r3, #31
 8009d56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009d5a:	107f      	asrs	r7, r7, #1
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	2516      	movs	r5, #22
 8009d60:	4620      	mov	r0, r4
 8009d62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009d66:	1886      	adds	r6, r0, r2
 8009d68:	428e      	cmp	r6, r1
 8009d6a:	bfde      	ittt	le
 8009d6c:	1b89      	suble	r1, r1, r6
 8009d6e:	18b0      	addle	r0, r6, r2
 8009d70:	18a4      	addle	r4, r4, r2
 8009d72:	0049      	lsls	r1, r1, #1
 8009d74:	3d01      	subs	r5, #1
 8009d76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009d7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009d7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d82:	d1f0      	bne.n	8009d66 <__ieee754_sqrt+0x92>
 8009d84:	462a      	mov	r2, r5
 8009d86:	f04f 0e20 	mov.w	lr, #32
 8009d8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d8e:	4281      	cmp	r1, r0
 8009d90:	eb06 0c05 	add.w	ip, r6, r5
 8009d94:	dc02      	bgt.n	8009d9c <__ieee754_sqrt+0xc8>
 8009d96:	d113      	bne.n	8009dc0 <__ieee754_sqrt+0xec>
 8009d98:	459c      	cmp	ip, r3
 8009d9a:	d811      	bhi.n	8009dc0 <__ieee754_sqrt+0xec>
 8009d9c:	f1bc 0f00 	cmp.w	ip, #0
 8009da0:	eb0c 0506 	add.w	r5, ip, r6
 8009da4:	da43      	bge.n	8009e2e <__ieee754_sqrt+0x15a>
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	db41      	blt.n	8009e2e <__ieee754_sqrt+0x15a>
 8009daa:	f100 0801 	add.w	r8, r0, #1
 8009dae:	1a09      	subs	r1, r1, r0
 8009db0:	459c      	cmp	ip, r3
 8009db2:	bf88      	it	hi
 8009db4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009db8:	eba3 030c 	sub.w	r3, r3, ip
 8009dbc:	4432      	add	r2, r6
 8009dbe:	4640      	mov	r0, r8
 8009dc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009dc4:	f1be 0e01 	subs.w	lr, lr, #1
 8009dc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009dcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009dd4:	d1db      	bne.n	8009d8e <__ieee754_sqrt+0xba>
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	d006      	beq.n	8009de8 <__ieee754_sqrt+0x114>
 8009dda:	1c50      	adds	r0, r2, #1
 8009ddc:	bf13      	iteet	ne
 8009dde:	3201      	addne	r2, #1
 8009de0:	3401      	addeq	r4, #1
 8009de2:	4672      	moveq	r2, lr
 8009de4:	f022 0201 	bicne.w	r2, r2, #1
 8009de8:	1063      	asrs	r3, r4, #1
 8009dea:	0852      	lsrs	r2, r2, #1
 8009dec:	07e1      	lsls	r1, r4, #31
 8009dee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009df2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009df6:	bf48      	it	mi
 8009df8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009dfc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009e00:	4614      	mov	r4, r2
 8009e02:	e781      	b.n	8009d08 <__ieee754_sqrt+0x34>
 8009e04:	0ad9      	lsrs	r1, r3, #11
 8009e06:	3815      	subs	r0, #21
 8009e08:	055b      	lsls	r3, r3, #21
 8009e0a:	2900      	cmp	r1, #0
 8009e0c:	d0fa      	beq.n	8009e04 <__ieee754_sqrt+0x130>
 8009e0e:	02cd      	lsls	r5, r1, #11
 8009e10:	d50a      	bpl.n	8009e28 <__ieee754_sqrt+0x154>
 8009e12:	f1c2 0420 	rsb	r4, r2, #32
 8009e16:	fa23 f404 	lsr.w	r4, r3, r4
 8009e1a:	1e55      	subs	r5, r2, #1
 8009e1c:	4093      	lsls	r3, r2
 8009e1e:	4321      	orrs	r1, r4
 8009e20:	1b42      	subs	r2, r0, r5
 8009e22:	e78a      	b.n	8009d3a <__ieee754_sqrt+0x66>
 8009e24:	4610      	mov	r0, r2
 8009e26:	e7f0      	b.n	8009e0a <__ieee754_sqrt+0x136>
 8009e28:	0049      	lsls	r1, r1, #1
 8009e2a:	3201      	adds	r2, #1
 8009e2c:	e7ef      	b.n	8009e0e <__ieee754_sqrt+0x13a>
 8009e2e:	4680      	mov	r8, r0
 8009e30:	e7bd      	b.n	8009dae <__ieee754_sqrt+0xda>
 8009e32:	bf00      	nop
 8009e34:	7ff00000 	.word	0x7ff00000

08009e38 <_init>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr

08009e44 <_fini>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr
